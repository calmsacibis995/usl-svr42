/*	Copyright (c) 1990, 1991, 1992 UNIX System Laboratories, Inc.	*/
/*	Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 AT&T	*/
/*	  All Rights Reserved  	*/

/*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF     	*/
/*	UNIX System Laboratories, Inc.                     	*/
/*	The copyright notice above does not evidence any   	*/
/*	actual or intended publication of such source code.	*/

#ifndef _FS_SFS_SFS_TABLES_H	/* wrapper symbol for kernel use */
#define _FS_SFS_SFS_TABLES_H	/* subject to change without notice */

#ident	"@(#)uts-comm:fs/sfs/sfs_tables.h	1.4.3.3"
#ident	"$Header: $"

#ifdef _KERNEL_HEADERS

#ifndef _UTIL_TYPES_H
#include <util/types.h>	/* REQUIRED */
#endif

#elif defined(_KERNEL)

#include <sys/types.h>	/* REQUIRED */

#endif /* _KERNEL_HEADERS */

/*
 * The purpose of the tables is to allow for quick determination
 * of available blocks in the free map (instead of using a
 * sophisticated algorithm).
 *
 * The index into the table represents a byte worth of available bits in 
 * the free map.  Each table entry contains the mask of allowable number
 * of fragments of allocation where each bit in the mask represents a
 * particular size (i.e., 1 -> 1, 10 -> 2, 100 -> 3, 1000 -> 4, etc.).
 * Note that the allowable number is the maximum number, i.e.,
 * for 00000111, the number is 3 even though 1 or 2 fragments
 * would be possible as well.
 *
 * Table 124 combines the masks for file systems with 1, 2, and 4
 * fragments/logical block.  The first bit is unused.  The second bit
 * is used by file systems with 1 fragment/logical block; the
 * third and fourth bits by 2 fragments/logical block; and the
 * fifth through eighth bits by 4 fragments/logical block.
 * Table 8 represents the mask for file systems with 8
 * fragments/logical block.
 *
 * An example for the use of table 8 follows:
 *
 *	index: 0xf7 (11110111) -> content: 0x0c (00001100)
 *
 *	If the relevant byte in the free map has 0xf7 bits turned on,
 *	then 3 or 4 fragments can be allocated, represented by the
 *	mask which OR'ed 100 and 1000.
 *
 * An example for the use of table 124 follows:
 *
 *	index: 0xf7 (11110111) -> content: 0xce (11001110)
 *
 *	If the relevant byte in the free map has 0xf7 bits turned on,
 *	then 1 fragment can be allocated for fs with 1 frag/block
 *	(represented by 10); 1 or 2 fragments can be allocated for
 *	fs with 2 frags/block (represented by 1100); and 3 or 4
 *	fragments can be allocated for fs with 4 frags/block
 *	(represented by 11000000).
 *
 * Refer to sfs_mapsearch(), sfs_scanc(), and sfs_fragacct()
 * for details on how these tables are manipulated.
 *
 * The use of sfs_around[] and sfs_inside[] allow for proper
 * allocation of bits.  Again, from our example, 3 fragments
 * can be allocated from 0xf7.  The use of sfs_around[] and
 * sfs_inside[] assure that the 3 fragments are not taken
 * from the 4 contiguous fragments, rather from the 3
 * contiguous fragments.  Refer to sfs_mapsearch() and
 * sfs_fragacct() for details.
 */

extern int sfs_around[];
extern int sfs_inside[];
extern u_char *sfs_fragtbl[];

#define SFS_AROUND_INIT	{ \
	0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff, 0x1ff, 0x3ff \
}
#define SFS_INSIDE_INIT { \
	0x0, 0x2, 0x6, 0xe, 0x1e, 0x3e, 0x7e, 0xfe, 0x1fe \
}

#define SFS_TBL124_INIT { \
	0x00, 0x16, 0x16, 0x2a, 0x16, 0x16, 0x26, 0x4e, \
	0x16, 0x16, 0x16, 0x3e, 0x2a, 0x3e, 0x4e, 0x8a, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x2a, 0x3e, 0x3e, 0x2a, 0x3e, 0x3e, 0x2e, 0x6e, \
	0x3e, 0x3e, 0x3e, 0x3e, 0x2a, 0x3e, 0x6e, 0xaa, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x26, 0x36, 0x36, 0x2e, 0x36, 0x36, 0x26, 0x6e, \
	0x36, 0x36, 0x36, 0x3e, 0x2e, 0x3e, 0x6e, 0xae, \
	0x4e, 0x5e, 0x5e, 0x6e, 0x5e, 0x5e, 0x6e, 0x4e, \
	0x5e, 0x5e, 0x5e, 0x7e, 0x6e, 0x7e, 0x4e, 0xce, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x16, 0x16, 0x16, 0x3e, 0x16, 0x16, 0x36, 0x5e, \
	0x16, 0x16, 0x16, 0x3e, 0x3e, 0x3e, 0x5e, 0x9e, \
	0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x7e, \
	0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x7e, 0xbe, \
	0x2a, 0x3e, 0x3e, 0x2a, 0x3e, 0x3e, 0x2e, 0x6e, \
	0x3e, 0x3e, 0x3e, 0x3e, 0x2a, 0x3e, 0x6e, 0xaa, \
	0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x7e, \
	0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x7e, 0xbe, \
	0x4e, 0x5e, 0x5e, 0x6e, 0x5e, 0x5e, 0x6e, 0x4e, \
	0x5e, 0x5e, 0x5e, 0x7e, 0x6e, 0x7e, 0x4e, 0xce, \
	0x8a, 0x9e, 0x9e, 0xaa, 0x9e, 0x9e, 0xae, 0xce, \
	0x9e, 0x9e, 0x9e, 0xbe, 0xaa, 0xbe, 0xce, 0x8a, \
}

#define SFS_TBL8_INIT { \
	0x00, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x04, \
	0x01, 0x01, 0x01, 0x03, 0x02, 0x03, 0x04, 0x08, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x02, 0x03, 0x03, 0x02, 0x04, 0x05, 0x08, 0x10, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x05, 0x09, \
	0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x02, 0x06, \
	0x04, 0x05, 0x05, 0x06, 0x08, 0x09, 0x10, 0x20, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x05, 0x09, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x03, 0x03, 0x03, 0x03, 0x05, 0x05, 0x09, 0x11, \
	0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x02, 0x06, \
	0x03, 0x03, 0x03, 0x03, 0x02, 0x03, 0x06, 0x0a, \
	0x04, 0x05, 0x05, 0x06, 0x05, 0x05, 0x06, 0x04, \
	0x08, 0x09, 0x09, 0x0a, 0x10, 0x11, 0x20, 0x40, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x05, 0x09, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x03, 0x03, 0x03, 0x03, 0x05, 0x05, 0x09, 0x11, \
	0x01, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x05, \
	0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x05, 0x09, \
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, \
	0x05, 0x05, 0x05, 0x07, 0x09, 0x09, 0x11, 0x21, \
	0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x02, 0x06, \
	0x03, 0x03, 0x03, 0x03, 0x02, 0x03, 0x06, 0x0a, \
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, \
	0x02, 0x03, 0x03, 0x02, 0x06, 0x07, 0x0a, 0x12, \
	0x04, 0x05, 0x05, 0x06, 0x05, 0x05, 0x06, 0x04, \
	0x05, 0x05, 0x05, 0x07, 0x06, 0x07, 0x04, 0x0c, \
	0x08, 0x09, 0x09, 0x0a, 0x09, 0x09, 0x0a, 0x0c, \
	0x10, 0x11, 0x11, 0x12, 0x20, 0x21, 0x40, 0x80, \
}

#define SFS_FRAGTBL_INIT { \
	0, sfs_fragtbl124, sfs_fragtbl124, 0, sfs_fragtbl124, 0, 0, 0, sfs_fragtbl8, \
}
#endif /* _FS_SFS_SFS_TABLES_H */
