#ident	"@(#)pkg.nfs:common/pkg/nfs/postinstall	1.21"
#ident	"$Header: $"

# install a module.  $1 is the module name


SCRIPTS=/usr/sbin/pkginst
. ${SCRIPTS}/updebug
[ "$UPDEBUG" = YES ] && set -x

do_install() {
	ERR=/tmp/${1}.err
	OPTS=""	
	IDCOMPS="Driver.o Master System Mfsys Sfsys Node"
	if
		[ -f ${1}.Dr ]
	then
		mv ${1}.Dr Driver.o
	fi
	if [ -f ${1}.Sp ]
	then
		mv ${1}.Sp Space.c
	fi
	if [ -f ${1}.Mt ]
	then
		mv ${1}.Mt Mtune
	fi
	if [ -f ${1}.Ma ]
	then
		grep -v "^[\*#]ident" ${1}.Ma > Master
		rm -rf ${1}.Ma
	fi
	if
		[ -f ${1}.Sy ]
	then
		grep -v "^[\*#]ident" ${1}.Sy |
			sed "${SEDCMD1}" >System
		rm -rf ${1}.Sy
	fi
	if
		[ -f ${1}.Mf ]
	then
		grep -v "^[\*#]ident" ${1}.Mf > Mfsys
		rm -rf ${1}.Mf
		OPTS="-c"
	fi
	if
		[ -f ${1}.Sf ]
	then
		grep -v "^[\*#]ident" ${1}.Sf |
			sed "${SEDCMD2}" >Sfsys
		rm -rf ${1}.Sf
		OPTS=${OPTS}"l"
	fi
	if
		[ -f ${1}.No ]
	then
		grep -v "^[\*#]ident" ${1}.No > Node
		rm -rf ${1}.No
	fi
	${CONFBIN}/idcheck -p ${1} > ${ERR} 2>&1
	RC=$?
	if [ "$RC" = 0 ]
	then
		${CONFBIN}/idinstall -P ${PKGINST} -a ${OPTS} ${1} 2> ${ERR}
		RET=$?
	elif
		[ "$RC" = 8 ]
	then	
		[ ! -d /etc/conf/pack.d/${1} ] && mkdir /etc/conf/pack.d/${1}
		${CONFBIN}/idinstall -P ${PKGINST} -u ${1} 2> ${ERR}
		RET=$?
	else
	
		${CONFBIN}/idinstall -P ${PKGINST} -u ${1} 2> ${ERR}
		RET=$?
	fi
	rm -rf ${IDCOMPS}
	if [ ${RET} != 0 ]
	then
		message "The installation cannot be completed due to \
an error in the driver installation during the installation of the ${1} \
module of the ${NAME}.  The file ${ERR} contains the errors."
		
		# rm nfs.env created by chkpkgrel run from the request

		rm -f /var/sadm/upgrade/nfs.env

		exit ${FAILURE}
	fi
	rm -rf ${ERR}
}

FAILURE=1	# fatal error

CONFDIR=/etc/conf
CONFBIN=${CONFDIR}/bin

NOTOOLS="ERROR: The Installable Driver feature has been removed. \
The ${NAME} cannot be installed."

SEDCMD1="s/[	 ]N[	 ]/	Y	/"
SEDCMD2="s/[	 ]N/	Y/"

VOLATILES=`echo /tmp/nfs/*`

cd /var/sadm/pkg/${PKG}/install

# determine that ID/TP tools are available

if
	[ ! -x ${CONFBIN}/idbuild -o ! -x ${CONFBIN}/idinstall \
		-o ! -x ${CONFBIN}/idcheck ]
then
	message ${NOTOOLS}
	exit $FAILURE
fi

cd /tmp/nfs

# install modules

for module in nfs klm
do
	do_install $module 
done

#
#	add entry in /etc/dfs/fstypes
#
if [ ! -d /etc/dfs ]
then	mkdir /etc/dfs
fi

if [ -s /etc/dfs/fstypes ]
then	if grep '^nfs' /etc/dfs/fstypes > /dev/null 2>&1
	then :
	else echo "nfs	Network File System Utilities: Version 1.0" >> /etc/dfs/fstypes
	fi
else	echo "nfs	Network File System Utilities: Version 1.0" > /etc/dfs/fstypes
fi

installf $PKGINST /etc/dfs/fstypes v \? \? \? 1 NULL NULL

## Change init state to 3

/usr/bin/ed -s /etc/inittab <<- EOF > /dev/null 2>&1
	/initdefault/
	s/2/3/
	w
	q
EOF

/usr/bin/ed -s /etc/conf/init.d/kernel <<- EOF > /dev/null 2>&1
	/initdefault/
	s/2/3/
	w
	q
EOF

## for graphical admin
> /etc/dfs/dtvfstab
installf ${PKGINST} /etc/dfs/dtvfstab f 0644  root root 1 NULL NULL

#
# attach the desktop manager class definitions
#
if [ ! -z "`echo ${CLASSES} | grep DTMadmin`" ]
then
	if [ -d /usr/X/lib/classdb ]
	then
		/bin/grep "INCLUDE nfs\.cdb;" /usr/X/lib/classdb/dtadmin >/dev/null 2>&1
		if [ $? -ne 0 ]
		then
			echo "INCLUDE nfs.cdb;" >> /usr/X/lib/classdb/dtadmin
		fi
	fi
fi

#
# Add File_Sharing icon to all the existing users with desktop
# First, get the list of users; /usr/bin/listusers cannot be used
# because it is not in the base package.

#listusers|cut -f1 -d " " > /tmp/USERS_LIST

rm -f /tmp/USERS_LIST
while read line
do
	uid=`echo $line | cut -f 3 -d ":"`
	[ "$uid" -lt 100 ] && continue
	name=`echo $line | cut -f 1 -d ":"` 
	echo "$name" >> /tmp/USERS_LIST
done < /etc/passwd

sort -o /tmp/USERS_LIST /tmp/USERS_LIST

while read name
do
        HOMEDIR=`egrep "^$name:" /etc/passwd|cut -f 6 -d ":"`

        # check if desktop environment is setup
        [ -d $HOMEDIR/System_Setup ] && {
                [ ! -s $HOMEDIR/System_Setup/File_Sharing ] && {
                        ln -s /usr/X/bin/File_Sharing $HOMEDIR/System_Setup/File_Sharing  2>/dev/null
                        installf $PKGINST $HOMEDIR/System_Setup/File_Sharing=/usr/X/bin/File_Sharing s
                }
        }
done < /tmp/USERS_LIST

rm -f /tmp/USERS_LIST

# rebuild for changes to take effect
TMP=/tmp/nfs.$$
${CONFBIN}/idbuild 2>${TMP}
if
	[ "$?" -ne "0" ]
then
	echo "The attempt to rebuild the kernel has failed. Errors have been written"
	echo "to the file " ${TMP}

	# rm nfs.env created by chkpkgrel run from the request

	rm -f /var/sadm/upgrade/nfs.env

	exit ${FAILURE}
fi
removef ${PKGINST} ${VOLATILES} >/dev/null 2>&1
removef ${PKGINST} /tmp/nfs >/dev/null 2>&1
removef -f ${PKGINST} >/dev/null 2>&1

#
#	Add NFS commands to TFM database
#
#while read cmd
#do
#	base=`basename $cmd`
#	privs=`
#		egrep ":${cmd}$" /etc/security/tcb/privs |
#		sed -n '/%inher,.*:/s/^.*%inher,\(.*\):.*/\1/p' |
#		sed 's/,/:/gp'
#		`
#	if [ ! -f $cmd ]
#	then
#		echo "Warning: $cmd not found on the system.\c"
#		echo "  Not adding to TFM."
#		continue
#	fi
#
#	if [ -z "$privs" ]
#	then
#		adminrole -a $base:$cmd NET
#	else
#		adminrole -a $base:$cmd:$privs NET
#	fi
#done <<!
#/usr/lib/nfs/mountd
#/usr/lib/nfs/automount
#/usr/lib/nfs/nfsd
#/usr/lib/nfs/biod
#/usr/sbin/exportfs
#/usr/lib/nfs/lockd
#/usr/lib/nfs/statd
#/usr/lib/nfs/bootparamd
#/usr/lib/nfs/pcnfsd
#/usr/sbin/showmount
#/usr/sbin/nfsstat
#!

#
#
#	end with installf -f and exit message (required reboot)
#

installf -f $PKGINST

# rm nfs.env created by chkpkgrel run from the request

rm -f /var/sadm/upgrade/nfs.env

exit 	10
