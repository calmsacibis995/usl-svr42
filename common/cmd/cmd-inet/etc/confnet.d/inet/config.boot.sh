#!/sbin/sh
#	Copyright (c) 1990, 1991, 1992 UNIX System Laboratories, Inc.
#	Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 AT&T
#	  All Rights Reserved

#	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF
#	UNIX System Laboratories, Inc.
#	The copyright notice above does not evidence any
#	actual or intended publication of such source code.

#ident	"@(#)cmd-inet:common/cmd/cmd-inet/etc/confnet.d/inet/config.boot.sh	1.4"
#
# sh script to process /etc/confnet.d/inet/interface
# shell variables and values passed from the calling shell are:
# LOG		log file, default is: "/tmp/inet.start"
# HOSTFILE	IP host file, default is: "/etc/inet/hosts"
# DATADIR
# DATABASE
# DATASCRIPT
# other shell variables:
# UPSAVE	file to save the ifconfig commands built when the 
#		operation is "up", default is /etc/confnet.d/inet/up.save
# NUstrcf	file to save the new, composite strcf for use by inetinit
#
# op is the "operation" that is to be performed.  It is one of:
#
#  down		bring all interfaces down
#
#  stop		Synonym for "down"
#
#  up		bring all the interfaces up.  Do the slink and ifconfig.
#
#  start	synonyms for "up"
#  restart
#
#  version	only print version values.
#		All lines of the form #version=string assign the
#		version number.
#
#  interfaces	Only list the interfaces, used to loop through the
#		configured streams.
#  
version=1.0				#(default)version of lines to process
system_name_string=`/usr/bin/uname -n`	#cache the `uname -n` return value
shell_return=0				#(potentially) LAST error return

: ${LOG:=/tmp/inet.start}		#log operations to file
: ${DATADIR:=/etc/confnet.d/inet}
: ${NUstrcf:=$DATADIR/strcf.custom}
: ${UPSAVE:=$DATADIR/up.save} 	# ifconfig commands built for "up" operation
: ${NAMESAVE:=$DATADIR/name.was}
: ${DATABASE:=$DATADIR/interface}
: ${HOSTFILE:=/etc/inet/hosts}	#file for name to address translation

HOSTselect=$DATADIR/host.select
HOSTuse=$DATADIR/host.use
SLINK=/usr/sbin/slink
IFCONF=/usr/sbin/ifconfig
STRCF=/etc/inet/strcf
KLUDGE=kludge
comb_ifc="#
# THIS FILE IS AUTOMATICALLY GENERATED.
# DO NOT MAKE CHANGES MANUALLY.  THEY WILL BE LOST.
#"

REPORT='|| echo "ifconfig failed with return code $?"'

usage() {
	echo "$0 [-d] [up|start|restart|down|stop|version|interfaces]"\
		"#default is up"
	exit 1
}

if [ "X$1" = X-d ]
then
	DEBUG="DEBUG mode"
	shift
fi

case $# in
0 | 1)		;;
*)	usage	;;
esac

op=${1-up}

case "$op" in
up | start | restart | down | stop)
	op=up
	if [ -f $NAMESAVE ] && echo "$system_name_string" \
		| cmp -s - $NAMESAVE
	then
		if [ -z "$DEBUG" -a -f $UPSAVE -a -f $NUstrcf ]
		then
			set - `ls -Lc1t $DATABASE $HOSTFILE $UPSAVE` 
			if [ $1 = $UPSAVE ]	# UPSAVE is youngest
			then
				exit 0
			fi
			if [ $1 = $HOSTFILE -a $2 = $UPSAVE ]
			then
				if sed -n -f $HOSTselect $HOSTFILE \
					| cmp -s - $HOSTuse
				then
					exit 0
				fi
			fi
		fi
	fi
	#
	# build new commands
	#
	/sbin/rm $UPSAVE $NUstrcf $HOSTselect 2>/dev/null
	(
		echo '#This sed script is automatically generated'
		echo '#		DO NOT MANUALLY EDIT	'
		echo '1a\
# This data file is automatically generated.  DO NOT MANUALLY EDIT!'
	)  > $HOSTselect
	echo "$system_name_string" > $NAMESAVE
	;;
version)
	echo Default processing version is $version
	;;
interfaces)		;;
*)		usage	;;
esac


#
# nametoaddr(sym_name) # looks up the symbolic name
# in the HOSTFILE /etc/inet/hosts file and returns the
# numeric dot notation string address 
#
nametoaddr () {
	#
	# We quote reg-exp characters that may occur in $1 (The host name)
	# to protect sed from them.  To meet spec. we would only need
	# to handle `.' for hostnames of the form `usl.com' but we
	# quote The Kleene Star and friends to be complete.
	#
	# half the back slashes each for sed and back quotes in turn
	#
	HN=`sed 's/\([].*[^/ ]\)/\\\\\1/g' <<!
$1
!
`
	#
	# The follow sed expressions do not check the validity of
	# the host address but will handle syntax traps.
	#
	SEDscript="
/^[0-9][0-9.]*[	 ][	 ]*${HN}$/p
/^[0-9][0-9.]*[	 ][	 ]*${HN}[	 #].*$/p
"
	echo "$SEDscript" >> $HOSTselect
	extract=`sed -n -e "$SEDscript" $HOSTFILE  2>/dev/null`
	expr "$extract" : '\([^ 	]*\).*'
}

#
# There was a fatal error - we can't ifconfig without an address!
# Log the failure, send mail to the administrator, set error return.
# Don't exit, since a later interface may be successfull.
#
no_address_failure () {
OWNER=`grep -l owner /usr/X/desktop/LoginMgr/Users/* 2>/dev/null|
	sed 's%.*/%%g'`
/usr/bin/mail ${OWNER} root >/dev/null 2>&1 <<!
Subject: Network Startup Problem, address not specified

The network facilities were not able to start because no address
has been specified for this machine, $1 .  You
can set up your machine address by using the Internet Setup
icon in the System Setup folder of the Desktop Metaphor.

If you do not have the Desktop Metaphor installed, please see
the Network Adminstation documentation, Assigning IP Addresses
to your Network Hosts and Setting up TCP/IP Files sections for
details on how to setup your IP address in the /etc/inet/hosts
file.
!

	echo >>$LOG The system name $1 was not found in /etc/hosts.
	shell_return=10
}

#
# process a version=1.0 entry
#
# Summary of Format of a 1.0 line (see database for complete and
# up-to-date comments).
#
#	prefix:unit#:addr:device:ifconfig opts:slink opts:
#
#Field	Name		Verify	Purpose			Default on NULL
#
#$1	prefix		string	device identifier	NONE
#	prefix is an identifier for a driver's netstat statistics
#
#$2	unit		number	device ifstats index	NONE
#	unit is the index per prefix array
#
#$3	address		NONE	IP name or address	`/usr/bin/uname -n`
#	address is used by ifconfig to initialize the transport provider.
#	This may be the internet name or number.
#	Null is expanded to `/usr/bin/uname -n`
#
#$4	device		string	full device path name	NONE
#	device is the node name of the transport provider.
#
#$5	ifconfig_opt	NONE	allow customized ifconfig options	NONE
#
#$6	slink_opt	NONE	allow customized slink options	NONE
#
Vers_1_0 () {
	cmd_PU="$1$2"
	prefix="$1"
	unit="$2"
	nam_add="${3:-${system_name_string}}"
	device="$4"
	ifconfig_opt="$5"
	slink_opt="${6:-add_interface}"
	if [ -z "$prefix" -o -z "$unit" -o ! -c "$device" ]
	then
		shell_return=12
		echo "illegal prefix($prefix), unit number($unit),"\
			"or device($device)" >>$LOG
		return 12
	fi
	case "$unit" in
	*[!0-9]*)
		shell_return=13
		echo "unit number($unit) contains non-numeric" >>$LOG
		return 13
		;;
	esac
	case "$op" in
	interfaces)
		echo $prefix$unit
		;;
	up)
		address="$nam_add"
		#
		# convert to dot decimal address from symbolic
		#
		case "$address" in
		[!0-9]*)
			address=`nametoaddr $address`;;
		esac
		if [ -z "$address" ]
		then
			no_address_failure "$nam_add"
			#
			# This is a fatal error 
			#  - we can't ifconfig without an address!
			# Log the failure, send mail to the administrator,
			# set error return.
			#
			return 14
		fi
		#
		# use the data provided to add a constructed ifconfig command
		# (with appropriate parameters) to a string of collected 
		# commands, and add a subroutine call (with appropriate
		# arguments) to a string for inclusion in a command script
		# and a customized strcf file, respectively
		#
		comb_ifc="$comb_ifc
$IFCONF $cmd_PU $address $ifconfig_opt ${op} $REPORT"
		comb_slink="$comb_slink
	$slink_opt ip $device $cmd_PU"
		;;
	esac
}

#
# pick_cmd(version) will return the command string to process the
# arguments from the DATABASE file that corresponds to this stated
# version of the database.
#
pick_cmd(){
	case "$1" in 
	1.0)
		echo 'Vers_1_0'
		;;
	*)
		echo :	# null process the lines that follow
		echo File uses unsupported version $version >>$LOG
		echo Line from file is $arglist >>$LOG
		shell_return=11
		;;
	esac
}

#
# Read the ":" separated fields in file as space separated, quoted
# strings compliments of sed.  Sed also strips out the noise (comments).
#
# Given the the fields as a string of space separated quoted strings,
# invoke the processing command with them as positional parameters.
#
# The variable $cmd is the command to correct process the lines from
# the database and it is revised as needed.
#
if [ $op = version ]
then
	cmd=:				# do process any of the lines
else
	cmd=`pick_cmd $version`		# the default version
fi

sed -e "
	s/[ 	]*\([#:]\)[ 	]*/\1/g
	s/^#[Vv][Ee][Rr][Ss][Ii][Oo][Nn][ 	=]*\(.*\)/version=\\1/
	/^#/d
	/^[ 	]*$/d
	s/'/'\''/
	s/^/'/
	s/:/' '/g
	s/$/'/
	" $DATABASE 2>/dev/null 0</dev/null \
 | (
	while read arglist
	do
		case X"$arglist" in
		X*=*)
			#
			# detect version number - we can remain compatible
			# with "earlier" releases.  also permits querying
			# the database for version info. if they have multiple
			# version strings in the file, output them all. 
			# Note that if there is a data line before the
			# first version tag, it gets the
			# default version number applied.
			#
			# sed converted the comment into an assignment string
			#
			eval "eval $arglist"
			if [ version = $op ]
			then
				echo file contains request for version: $version
			else
				cmd=`pick_cmd $version`
			fi
			;;
		*)
			#
			# process a line as per the version info
			#
			eval "$cmd $arglist"
			;;
		esac
	done


	case $op in
	up)				;;
	*)		exit $shell_return	;;
	esac

	#
	# here we construct the new strcf file and the file of commands
	#
	echo \
"#
# NOTICE:  DO NOT MAKE CHANGES TO THIS FILE!
# This routine is constructed automatically.  Changes made
# manually will be lost when the system reconstructs it!
#
$KLUDGE {
	boot
	ip = open /dev/ip
$comb_slink
}
" 		| cat $STRCF - > $NUstrcf
	echo "$comb_ifc" > $UPSAVE
	sed -n -f $HOSTselect $HOSTFILE > $HOSTuse
)
exit $shell_return
