#ident	"@(#)oamintf:common/cmd/oamintf/usermgmt/Form.addusr	1.2.22.7"
#ident  "$Header: Form.addusr 2.0 91/07/12 $"

form="Add a User"

framemsg=`readfile $INTFBASE/form.msg`

help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO

	
close=`/usr/bin/rm -f $UADDERR;/usr/bin/rm -f /tmp/skel`

done=`set -l UADDERR=/tmp/$VPID.aue;
/usr/bin/defadm useradd SKELDIR|fmlcut -d= -f2|set -l SKELDIR;
echo $SKELDIR | /usr/bin/grep "UX:defadm" | set -l NOSKEL;
[ "$NOSKEL" != "" ] && set -l SKELDIR="";
set -l AUDITPKG=1 -l ESPKG=1;
test -d /var/sadm/pkg/audit && set -l AUDITPKG=0;
test -d /var/sadm/pkg/es && set -l ESPKG=0;

unset -l ALLARGS -l UADDARGS -l UADDARGSAUD -l NSUSER;
set -l NUSER=$F2;
[ -n "$F1" ] && set -l UADDARGS="$UADDARGS -c'$F1'";
[ -n "$F3" ] && set -l UADDARGS="$UADDARGS -u$F3";
[ -n "$F4" ] && set -l UADDARGS="$UADDARGS -g$F4";
[ -n "$F5" ] && set -l UADDARGS="$UADDARGS -G$F5";
if [ "$F6" = "yes" ];
then
	set -l UADDARGS="$UADDARGS -d$F7 -m";
	[ -n "$SKELDIR" ] && set -l UADDARGS="$UADDARGS -k$SKELDIR";
fi;
[ -n "$F8" ] && set -l UADDARGS="$UADDARGS -s$F8";
[ -n "$F9" ] && set -l UADDARGS="$UADDARGS -f$F9";
[ -n "$F10" ] && set -l UADDARGS="$UADDARGS -e$F10";
echo UADDARGS=$UADDARGS >/tmp/uaddargs;
if [ "$!AUDITPKG" != "0" -a "$!ESPKG" != "0" ];
then
	message -f "Adding "$F2" to the system.";
	if [ -n "$TFADMIN" ]; then shell "$TFADMIN useradd $!UADDARGS $F2" >/dev/null 2>$UADDERR;
	else shell "useradd $!UADDARGS $F2" >/dev/null 2>$UADDERR; fi;
	if [ "$RET" -eq "0" ]; then
		set -l CMD="OPEN FORM $OBJ_DIR/Form.addpswd $F2";
	else
		set -l CMD="OPEN TEXT $OBJ_DIR/Text.ausrnok $F2";
	fi;
	rm -f /tmp/uaddargs;
else
	if [ "$!AUDITPKG" -eq "0" ]; then
		set -l CMD="OPEN FORM $OBJ_DIR/Form.audit";
	else
		set -l CMD="OPEN FORM $OBJ_DIR/Form.mac1";
	fi;
	rm -f /tmp/uaddargs;
fi`$CMD

#  $F1
name=Comments:
lininfo=Form.addusr:comments
nrow=1
ncol=3
frow=1
fcol=13
rows=1
columns=64
scroll=true

valid=`/usr/sadm/bin/valstr -r '^[ -9;-z]\{1,\}$' "$F1"`

invalidmsg=const "ERROR: Please enter a character string, cannot include a (:)."

#  $F2
name=Login:
lininfo=Form.addusr:login
nrow=2
ncol=3
frow=2
fcol=10
rows=1
columns=8

valid=`/usr/sadm/bin/valstr -r '^[!-9;-z]\{0,8\}$' "$F2" && /usr/sadm/sysadm/bin/uniq_lnam "$F2"`
invalidmsg=`if [ $RET -eq 2 ];
	    then
		echo "ERROR: Login ID must be unique.";
	    else
		echo "ERROR: Please enter a character string 1-8 characters, cannot include a (:).";
	    fi`

# $F3
name=User ID:
lininfo=Form.addusr:useid
nrow=3
ncol=3
frow=3
fcol=12
rows=1
columns=5

value=const `shell "$TFADMIN /usr/sadm/sysadm/bin/finduid"`
`/usr/sadm/sysadm/bin/getmaxuid | set -l MAXUID`
valid=`/usr/sadm/bin/valrange -l100 -u$MAXUID $F3 && /usr/sadm/sysadm/bin/uniq_uid $F3`
invalidmsg=`if [ $RET -eq 2 ];
	    then
		echo "ERROR: User ID must be unique.";
	    else
		/usr/sadm/bin/errange -l100 -u$MAXUID;
	    fi`

# $F4
name=Primary group:
lininfo=Form.addusr:prigrp
nrow=4
ncol=3
frow=4
fcol=18
rows=1
columns=8
value=`/usr/bin/defadm useradd GROUPID | fmlcut -d= -f2 | set -e GRD;
	if regex -v "$GRD" '^[0-9]+$';
	then
	    /usr/bin/cat /etc/group | fmlgrep "^.*:.*:$GRD:" | fmlcut -f1 -d: | set -e PRIMGRP;
	fi;
	echo $PRIMGRP`
rmenu=OPEN MENU $OBJ_DIR/Menu.pgrp
valid=`/usr/sadm/sysadm/bin/chk_pgrp "$F4" || test "$F4" = "other"`

invalidmsg=const "ERROR: Please enter an existing group name or group id."


# $F5
name=Supplementary group(s):
lininfo=Form.addusr:supgrp
nrow=5
ncol=3
frow=5
fcol=27
rows=1
columns=50
scroll=true

rmenu=OPEN MENU $OBJ_DIR/Menu.sgrp "$F4"
valid=`/usr/sadm/sysadm/bin/chk_sgrp "$F4" "$F5"`
invalidmsg=`if [ $RET -eq 1 ];
	    then
		echo "ERROR: Cannot enter same group name or group id as Primary group";
	    else
		if [ -f /tmp/sgrp ];
		then
			readfile /tmp/sgrp | set -l BSG;
			if [ "$BSG" -le 100 ];
			then
				echo "ERROR: Group id must be greater than 99";
			else
				echo "ERROR: Cannot find group $BSG";
			fi;
			unset -l BSG;
		else
			echo "ERROR: Groups must be comma separated";
		fi;
		/usr/bin/rm /tmp/sgrp;
	    fi`
# $F6
name=Create home directory?
nrow=6
ncol=3
frow=6
fcol=26
rows=1
columns=4
rmenu={ yes no }
menuonly=TRUE
value=no
invalidmsg=const Your may only enter 'yes' or 'no'.

#  $F7
name=Home directory:
lininfo=Form.addusr:homedir
nrow=7
ncol=3
frow=7
fcol=19
rows=1
columns=58
scroll=true
show=vary `if [ "$F6" = "yes" ];
	then
		echo TRUE;
	else
		echo FALSE;
	fi`

value=`/usr/bin/defadm useradd HOMEDIR| fmlcut -d= -f2`/"$F2"
valid=`/usr/sadm/bin/valpath -a -n "$F7"`

invalidmsg=const `/usr/sadm/bin/errpath -e "Either HOME not specified as an absolute path or the directory already exists."`

#  $F8
name=Shell:
lininfo=Form.addusr:shell
nrow=8
ncol=3
frow=8
fcol=10
rows=1
columns=67
scroll=true

value=const `/usr/bin/defadm useradd SHELL| cut -d= -f2`
valid=`/usr/sadm/bin/valpath -ox "$F8"`

invalidmsg=const "ERROR: Shell entered must exist and be executable."

#  $F9
name=Number of days of login inactivity after which user cannot log in:
lininfo=Form.addusr:inact
nrow=9
ncol=3
frow=9
fcol=70
rows=1
columns=7

value=const `/usr/bin/defadm useradd INACT| fmlcut -d= -f2`
valid=`/usr/sadm/bin/valint $F9`

invalidmsg=const `/usr/sadm/bin/errint`

#  $F10
name=Login expiration date:
lininfo=Form.addusr:expire
nrow=10
ncol=3
frow=10
fcol=26
rows=1
columns=8

value=const `/usr/bin/defadm useradd EXPIRE| fmlcut -d= -f2`
valid=`/usr/sadm/sysadm/bin/expdate $F10 || [ ! $F10 ]`
invalidmsg="Must be a future date."

name=RESET
button=8
action=RESET
