#ident	"@(#)oamintf:common/cmd/oamintf/usermgmt/Form.modusr2	1.2.18.3"
#ident  "$Header: Form.modusr2 2.0 91/07/12 $"

################################################################################
#	Module Name:  Form.modusr2
#
################################################################################
form="Modify a User Login"

`set -l LIFE=longterm`
lifetime=$LIFE

framemsg=`readfile $INTFBASE/form.msg`

`set -l LOGIN=$ARG1`
`set -l LOGNAME=$ARG1`
`shell "$TFADMIN /usr/bin/logins -oxal $ARG1" | set -l LOGLINE`
`unset -l F1`

help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO

wrap=false


done=`message -w;
	set -l UMODERR=/tmp/$VPID.mue;
	unset -l UMODARGS -l OPERATOR -l OP -l op -l ALLARGS -l UMODARGSAUD;
	set -l AUDITPKG=1 -l ESPKG=1;
	test -d /var/sadm/pkg/audit && set -l AUDITPKG=0;
	test -d /var/sadm/pkg/es && set -l ESPKG=0;
	test "$F1" != "$OCOM" && set -l UMODARGS="$UMODARGS -c'$F1'";
	test "$F2" != "$OLOG" && set -l UMODARGS="$UMODARGS -l$F2";
	test "$F3" != "$OUID" && set -l UMODARGS="$UMODARGS -u$F3";
	test "$F4" != "$OPGRP" && set -l UMODARGS="$UMODARGS -g$F4";
	test "$F5" != "$OSGRP" && set -l UMODARGS="$UMODARGS -G$F5";
	test "$F6" != "$OHD" && set -l UMODARGS="$UMODARGS -d$F6 -m";
	test "$F7" != "$OSH" && set -l UMODARGS="$UMODARGS -s$F7";
	test "$F8" != "$OINACT" && set -l UMODARGS="$UMODARGS -f$F8";
	test "$F9" != "$OEXP" && set -l UMODARGS="$UMODARGS -e$F9";
	if [ "$!AUDITPKG" != "0" -a "$!ESPKG" != "0" ]; then
		message -f "Modifying user $LOGIN.";
		/usr/bin/rm -f /tmp/sgrp;
	        if [ -n "$TFADMIN" ];then shell "$TFADMIN usermod $!UMODARGS $!LOGIN >/dev/null 2>$UMODERR";
	        else shell "/usr/sbin/usermod $!UMODARGS $!LOGIN >/dev/null 2>$UMODERR"; fi;
		if [ "$RET" -eq "0" ]; then
	      		set -l LIFE=shortterm;
			set -l CMD="OPEN TEXT $OBJ_DIR/Text.musrok $LOGIN";
		else
			set -l CMD="OPEN TEXT $OBJ_DIR/Text.musrnok $LOGIN";
		fi;
	else
		if [ "$!AUDITPKG" = "0" ]; then
			set -l CMD="OPEN FORM $OBJ_DIR/Form.modaud1";
		else
			set -l CMD="OPEN FORM $OBJ_DIR/Form.modmac1";
		fi;
	fi`$CMD

#  $F1
name=Comments:
lininfo=Form.modusr2:comments
nrow=1
ncol=3
frow=1
fcol=13
rows=1
columns=64
scroll=true

`echo $LOGLINE | fmlcut -d: -f 5 |set -l OCOM`
value="$OCOM"
valid=`/usr/sadm/bin/valstr -r '^[ -9;-z]\{1,\}$' "$F1"`

invalidmsg=const "ERROR: Please enter a character string, cannot include a (:)."

#  $F2
name=Login:
lininfo=Form.modusr2:login
nrow=2
ncol=3
frow=2
fcol=10
rows=1
columns=8

`echo $LOGLINE | fmlcut -d: -f1 | set -l OLOG`
value=$OLOG
valid=`/usr/sadm/bin/valstr -r '^[ -9;-z]\{0,8\}$' $F2 && /usr/sadm/sysadm/bin/uniq_lnam $F2 $OLOG`
invalidmsg=`if [ $RET -eq 2 ];
	    then
		echo "ERROR: Login ID must be unique.";
	    else
		echo "ERROR: Please enter a character string 1-8 characters, cannot include a (:).";
	    fi`

# $F3
name=User ID:
lininfo=Form.modusr2:useid
nrow=3
ncol=3
frow=3
fcol=12
rows=1
columns=5

`/usr/sadm/sysadm/bin/getmaxuid | set -l MAXUID;
echo $LOGLINE | fmlcut -d: -f2 | set -l OUID`
value=$OUID
valid=`/usr/sadm/bin/valrange -l100 -u$MAXUID $F3 && /usr/sadm/sysadm/bin/uniq_uid $F3 $OUID`
invalidmsg=`if [ $RET -eq 2 ];
	    then
		echo "ERROR: User ID must be unique.";
	    else
		errange -l100 -u$MAXUID;
	    fi`

# $F4
name=Primary group:
lininfo=Form.modusr2:prigrp
nrow=4
ncol=3
frow=4
fcol=18
rows=1
columns=8

`echo $LOGLINE | fmlcut -d: -f 3| set -l OPGRP`
value="$OPGRP"
rmenu=OPEN MENU $OBJ_DIR/Menu.pgrp
valid=`/usr/sadm/sysadm/bin/chk_pgrp "$F4" || test "$F4" = "other"`

invalidmsg=const "ERROR: Please enter an existing group name or group id."


# $F5
name=Supplementary group(s):
lininfo=Form.modusr2:supgrp
nrow=5
ncol=3
frow=5
fcol=27
rows=1
columns=50
scroll=true

`fmlgrep "[:,]$LOGIN" /etc/group | fmlcut -d: -f1 | tr "\012" "," | set -l GRP;
echo $GRP | sed -e 's/,$//' | set -l OSGRP;
unset -l GRP`
value="$OSGRP"
rmenu=OPEN MENU $OBJ_DIR/Menu.sgrp "$F4"
valid=`/usr/sadm/sysadm/bin/chk_sgrp "$F4" "$F5"`
invalidmsg=`if [ $RET -eq 1 ];
	    then
		echo "ERROR: Cannot enter same group name or group id as Primary group";
	    else
		if [ -f /tmp/sgrp ];
		then
			readfile /tmp/sgrp | set -l BSG;
			echo "ERROR: Cannot find group $BSG";
			unset -l BSG;
		else
			echo "ERROR: Groups must be comma separated";
		fi;
		/usr/bin/rm -f /tmp/sgrp;
	    fi`

#  $F6
name=Home directory:
lininfo=Form.modusr2:homedir
nrow=6
ncol=3
frow=6
fcol=19
rows=1
columns=58
scroll=true

`echo $LOGLINE | fmlcut -d: -f6 | set -l OHD`
value=$OHD
valid=`[ $OHD = $F6 ] || /usr/sadm/bin/valpath -na $F6`

invalidmsg=const `/usr/sadm/bin/errpath -e "It must be a unique directory."`

#  $F7
name=Shell:
lininfo=Form.modusr2:shell
nrow=7
ncol=3
frow=7
fcol=10
rows=1
columns=67
scroll=true

`echo $LOGLINE | fmlcut -d: -f7 | set -l OSH`
value="$OSH"
valid=`/usr/sadm/bin/valpath -aox $F7`

invalidmsg=const "ERROR: Shell entered must exist and be executable."

#  $F8
name=Number of days of login inactivity after which user cannot log in:
lininfo=Form.modusr2:inact
nrow=8
ncol=3
frow=8
fcol=70
rows=1
columns=7

`echo $LOGLINE | fmlcut -d: -f13|set -l OINACT;
 [ "$OINACT" = "-1" ] && set -l OINACT=""`
value="$OINACT"
valid=`/usr/sadm/bin/valint $F8`

invalidmsg=const `/usr/sadm/bin/errint`

#  $F9
name=Login expiration date:
lininfo=Form.modusr2:expire
nrow=9
ncol=3
frow=9
fcol=26
rows=1
columns=8

`echo $LOGLINE | fmlcut -d: -f14 | set -l OEXP;
 [ "$OEXP" = "0" ] && set -l OEXP="";
if [ "$OEXP" != "" ];
then
	set -l LLENGTH=6;
	echo $OEXP | wc -c | set -l LENGTH;
	echo $LENGTH | grep 7 && set -l LLENGTH=7;  
	if [ $LLENGTH = 7 ];
	then
		echo $OEXP | cut -c1,2 |set -l MTH;
		echo $OEXP | cut -c3,4 | set -l DAY;
		echo $OEXP | cut -c5,6 | set -l YEA;
	else
		echo $OEXP | cut -c1 | set -l MTH;
		echo $OEXP | cut -c2,3 | set -l DAY;
		echo $OEXP | cut -c4,5 | set -l YEA;
	fi;
	echo "$MTH/$DAY/$YEA" | set -l OEXP;
fi`
value="$OEXP"
valid=`/usr/sadm/sysadm/bin/expdate $F9 || [ ! $F9 ]`
invalidmsg="Must be a future date."

name=RESET
button=8
action=RESET
