#ident	"@(#)oamintf:common/cmd/oamintf/usermgmt/Form.modgrp2	1.2.13.3"
#ident  "$Header: Form.modgrp2 2.0 91/07/12 $"

################################################################################
#	Module Name:  Form.modgrp2
################################################################################
form="Modify a Group Definition"

framemsg=`readfile $INTFBASE/form.msg`

`set -l LIFE=longterm`
lifetime=$LIFE

help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO

wrap=false

close=`/usr/bin/rm -f $GMODERR`

done=`message -w -f "Modifying group $GNAM.";

   set -l GMODERR=/tmp/$VPID.mge;

   /usr/bin/rm -f /tmp/ln;

   message -w;
   /usr/sadm/sysadm/bin/modgrp $GNAM $F1 $F2 $F3 $F4 2> $GMODERR; 
   if [ $RET -eq 0 ];
   then
      set -l LIFE=shortterm;
      set -l CMD="OPEN TEXT $OBJ_DIR/Text.mgrpok $GNAM";
   else
      set -l CMD="OPEN TEXT $OBJ_DIR/Text.mgrpnok $GNAM";
   fi`$CMD

#  $F1
name=Group name:
lininfo=Form.modgrp2:grpname
nrow=1
ncol=3
frow=1
fcol=15
rows=1
columns=8

# Since this form is called only after the group name or ID is validated,
#   we can grep for the argument (ARG1) without having to worry if its
#   at the beginning of the line.  This is necessary since GIDs are not at
#   the beginning.  However, we can invoke this form with either a group
#   name or ID.
`fmlgrep "$ARG1:" /etc/group | fmlcut -d: -f1 | set -l GNAM`
value=const $GNAM
valid=`if [ "$GNAM" = "other" ];
       then
	   if [ "$F1" != "other" ];
	   then
		set -l GN="1" && echo FALSE;
	   else
		echo TRUE;
	   fi;
       else
	   /usr/sadm/bin/valstr -r '^[ -9;-z]\{1,8\}$' "$F1" && /usr/sadm/sysadm/bin/uniq_gnam "$F1" "$GNAM";
       fi`
invalidmsg=`if [ "$GN" = "1" ];
	    then
		echo "ERROR: You may not change group name for group 'other'.";
		set -l GN="0";
	    else 
	    	if [ $RET -eq 2 ];
	    	then
			echo "ERROR: Group name must be unique.";
	    	else
			echo "ERROR: Please enter a character string 1-8 characters, cannot include a (:).";
		fi;
	    fi`

#  $F2
name=Group ID:
lininfo=Form.modgrp2:grpid
nrow=2
ncol=3
frow=2
fcol=13
rows=1
columns=5
show=`if [ "$F1" != "other" ];
	then
		echo TRUE;
	else
		echo FALSE;
	fi`

`fmlgrep "^$GNAM:" /etc/group | fmlcut -d: -f3 | set -l GID`
value=const $GID
`set -l MAXID=60000`
valid=`/usr/sadm/bin/valrange -l100 -u$MAXID $F2 && /usr/sadm/sysadm/bin/uniq_gid $F2 $GID`
invalidmsg=`if [ $RET -eq  2 ];
	    then
		echo "ERROR: Group ID must be unique.";
	    else
		errange -l100 -u$MAXID;
	    fi`

#  $F3
name=Primary member(s):
lininfo=Form.modgrp2:primem
nrow=3
ncol=3
frow=3
fcol=22
rows=1
columns=55
scroll=true

`/usr/sadm/sysadm/bin/getprimary "$GNAM" | set -l PGRP`
value=const $PGRP
rmenu=OPEN MENU $OBJ_DIR/Menu.mlogins
valid=`if [ "$F1" = "other" ];
	then
		/usr/sadm/sysadm/bin/chk_logins -gother $F3;
	else
		/usr/sadm/sysadm/bin/chk_logins $F3;
	fi`
invalidmsg=`if [ $RET -eq 1 ];
	    then
		if [ -f /tmp/ln ];
	    	then
			readfile /tmp/ln | set -l BSG;
			echo "ERROR: Login '$BSG' does not exist.";
			unset -l BSG;
	    	else
			echo "ERROR: Login names must be comma separated";
	    	fi;
	    	/usr/bin/rm /tmp/ln;
	    fi`

#  $F4
name=Supplementary member(s):
lininfo=Form.modgrp2:supmem
nrow=4
ncol=3
frow=4
fcol=28
rows=1
columns=49
scroll=true

value=const `fmlgrep "^$GNAM:" /etc/group | fmlcut -d: -f4`
rmenu=OPEN MENU $OBJ_DIR/Menu.mlogins
valid=` if [ "$F1" = "other" ];
	then
		/usr/sadm/sysadm/bin/chk_logins -gother $F4;
	else
		/usr/sadm/sysadm/bin/chk_logins $F4;
	fi`
invalidmsg=`if [ $RET -eq 1 ];
	    then
		if [ -f /tmp/ln ];
	    	then
			readfile /tmp/ln | set -l BSG;
			echo "ERROR: Login '$BSG' does not exist.";
			unset -l BSG;
	    	else
			echo "ERROR: Login names must be comma separated";
	    	fi;
	    	/usr/bin/rm /tmp/ln;
	    fi`

name=RESET
button=8
action=RESET
