#ident	"@(#)debugger:catalog.d/common/event.help	1.14"
^*version^1
^*title^Debug
^+/usr/X/lib/locale/C/help/debug/debug.defs
^?A multi-process source-level debugger

^1^Overview
^$0
1. \k(Overview^/usr/X/lib/locale/C/help/debug/debug.help^Overview)

Debug is a symbolic, source-level debugger with many capabilities,
including control over multiple processes and evaluation of complex
expressions in C or C++.  The debugger has five main windows:

    The \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window) always appears when you invoke the debugger.
    This window displays the processes under the debugger's control, and
    the stack trace and symbols for the \d(current process).

    The \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window) displays the program's source.  Whenever the
    process stops, the source window is updated to display the current
    line in the current file.  You may also examine other files, and set
    and delete breakpoints.

    The \k(Disassembly Window^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window) displays the disassembly of the current
    function and the state of the registers.  The window is updated
    whenever the process stops.

    The \k(Event Window^/usr/X/lib/locale/C/help/debug/event.help^Event Window) displays events (breakpoints, watchpoints,
    system call events, etc.).  Deleting, disabling, enabling, and editing
    events is done from this window.

    The \k(Command Window^/usr/X/lib/locale/C/help/debug/command.help^Command Window) keeps a log of all the events as they occur.
    Process I/O is also displayed here.  This window allows you to enter
    commands as if you were using the command line version of the debugger.

The \k(Context^/usr/X/lib/locale/C/help/debug/context.help^Context Window), \k(Disassembly^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window), \k(Event^/usr/X/lib/locale/C/help/debug/event.help^Event Window), \k(Command^/usr/X/lib/locale/C/help/debug/command.help^Command Window), and one or more \k(Source^/usr/X/lib/locale/C/help/debug/source.help^Source Window) windows
make up a \d(window set).  Each window set controls a subset of the
processes being debugged, and each process belongs to exactly one window
set.  If you are debugging only one process, you will not need more than
one window set, but if you are debugging multiple processes, you may wish
to debug each process in a separate window set.  Window sets are created
by the \k(New Window Set^/usr/X/lib/locale/C/help/debug/context.help^New Window Set) option in the \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window)'s \k(File^/usr/X/lib/locale/C/help/debug/context.help^File) menu.
^1^Context Window
2. \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window)

The Context Window is the debugger's central window.
The Window consists of three panes:

	\k(Process Pane^/usr/X/lib/locale/C/help/debug/context.help^Process Pane)
	\k(Stack Pane^/usr/X/lib/locale/C/help/debug/context.help^Stack Pane)
	\k(Symbol Pane^/usr/X/lib/locale/C/help/debug/context.help^Symbol Pane)

The \k(Process Pane^/usr/X/lib/locale/C/help/debug/context.help^Process Pane) displays the state of the processes being debugged.
The process shown with the pointing hand is the \d(current process).
The \k(Stack Pane^/usr/X/lib/locale/C/help/debug/context.help^Stack Pane) displays
the stack trace for the current process;
the frame shown with the pointing hand is the \d(current frame).  Together,
the \d(current process) and the \d(current frame) define the \d(current context).
The \k(Symbol Pane^/usr/X/lib/locale/C/help/debug/context.help^Symbol Pane) displays the values of the variables visible in
the \d(current context).

The Context Window includes the following menu buttons:

	\k(File button^/usr/X/lib/locale/C/help/debug/context.help^File button)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/context.help^Edit button)
	\k(View button^/usr/X/lib/locale/C/help/debug/context.help^View button)
	\k(Control button^/usr/X/lib/locale/C/help/debug/context.help^Control button)
	\k(Event button^/usr/X/lib/locale/C/help/debug/context.help^Event button)
	\k(Properties button^/usr/X/lib/locale/C/help/debug/context.help^Properties button)
	Help button

The menus displayed by selecting these buttons provide commands to control
the state of the processes, options to change the information displayed,
and more.  See the Help for the individual buttons for details.

You may resize the Context Window.  You may also redistribute the space
within the window.  To do that, click SELECT on the border of any of the panes.
A handle will appear, which you may drag up or down to increase or decrease
the size of the pane relative to the other panes.
^1^Source Window
^$2
3. \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window)

The Source Window is made up of two panes, the Status Pane and the Source Pane.
The Source Window also includes the following menu buttons:

	\k(File button^/usr/X/lib/locale/C/help/debug/source.help^File button)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/source.help^Edit button)
	\k(View button^/usr/X/lib/locale/C/help/debug/source.help^View button)
	\k(Control button^/usr/X/lib/locale/C/help/debug/source.help^Control button)
	\k(Event button^/usr/X/lib/locale/C/help/debug/source.help^Event button)
	\k(Properties button^/usr/X/lib/locale/C/help/debug/source.help^Properties button)
	Help button

The Status Pane indicates the \d(current context), that is, the \d(current process),
its state, and if stopped, the function name and line number or address of the
\d(current frame).

The Source Pane of the \d(primary source window) displays the current source file.
Whenever the \d(current process) stops, the file is positioned to display the
current line in the current function.  The current line is highlighted, and also
indicated by an arrow in the left margin.  If there is no current file, or the file
was not compiled with debugging information, the Source Pane will be empty.
The Source Pane will also be empty if the debugger cannot find the current file;
in that case you can use the \k(Source Path^/usr/X/lib/locale/C/help/debug/popup.help^Source Path) popup window to tell the debugger where
to find the file.

A stop sign appears in the left margin for each line that has a breakpoint set
on it.  You may set or remove a breakpoint on a selected line with the
\k(Set Breakpoint^/usr/X/lib/locale/C/help/debug/source.help^Set Breakpoint) and \k(Delete Breakpoint^/usr/X/lib/locale/C/help/debug/source.help^Delete Breakpoint) options.

You may also view other files in the Source Pane, either by opening another
file from the list in the \k(Open^/usr/X/lib/locale/C/help/debug/popup.help^Open) popup window, or by viewing a different
function from the list in the \k(Show Function^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Source) popup window.

You may have more than one Source Window in a \d(window set).  The first
(or primary) Source Window is the one you get when you select the Source
Window button in the \k(Windows^/usr/X/lib/locale/C/help/debug/source.help^Windows) menu.  The primary window is always updated
to show the current source line whenever the \d(current process) stops.

Secondary Source Windows are created by selecting the \k(New Source^/usr/X/lib/locale/C/help/debug/source.help^New Source) option
in the \k(File^/usr/X/lib/locale/C/help/debug/source.help^File) menu, and are indicated by an asterisk ('*') in the window
header.  The Source Pane of a secondary window is not updated when the
current process stops.
^1^Disassembly Window
^$3
4. \k(Disassembly Window^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window)

The Disassembly Window has three parts: the Status Pane, the Registers Pane,
and the Disassembly Pane.  The Status Pane is identical to the Status Pane
in the \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window).  The Registers Pane displays the values
of the \d(current process)'s registers whenever the process stops.
The Disassembly Pane shows the disassembly of the current function.
You may also view the disassembly of other functions with the
\k(Show Function^/usr/X/lib/locale/C/help/debug/dis.help^Show Function - Disassembly) option in the \k(View^/usr/X/lib/locale/C/help/debug/dis.help^View) menu.

The Disassembly Window includes the following menu buttons:

	\k(File button^/usr/X/lib/locale/C/help/debug/dis.help^File)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/dis.help^Edit)
	\k(View button^/usr/X/lib/locale/C/help/debug/dis.help^View)
	\k(Control button^/usr/X/lib/locale/C/help/debug/dis.help^Control)
	\k(Event button^/usr/X/lib/locale/C/help/debug/dis.help^Event)
	Help button

The menus displayed by selecting these buttons provide commands to control
the state of the current process, options to change the information displayed,
and more.  See the Help sections for the individual buttons for details.

You may resize the Disassembly Window.  You may also redistribute the space
within the window.  To do that, click SELECT on the border of the Registers
pane or the Disassembly pane.  A handle will appear, which you may drag up
or down to increase or decrease the size of the pane relative to the other pane.
^1^Event Window
^$4
5. \k(Event Window)

The Event Window has three parts: the Status Pane, the Main Event Pane,
and the On Stop Event Pane.  The Status Pane is identical to the Status Pane
in the \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window).  The Main Event Pane displays the \d(stop event)s,
\d(signal event)s, and \d(syscall event)s for the \d(current process).  The
On Stop Pane displays the \d(onstop event)s for the current process.  The
information displayed for each event may include:

    ID		The event number.  You will also see the character 'D' next to
		the number if the event has been \k(Disabled^^Disable).

    Type		STOP, SIGNAL, or SYSCALL.  The type for a syscall
		event also includes the characters 'E' or 'X', for system call
		entry or exit, respectively.

    Processes	The processes for which the event is set.

    Condition	For stop events, the \k(Stop Expression^/usr/X/lib/locale/C/help/debug/popup.help^Stop Expression) is the condition.
		For signal events, this is the list of signals the events
		applies to.  For  syscall events, it is the list of
		affected system calls.

    Count		For stop and syscall events, the number of times the
		condition occurs before the event triggers.

    Command List	The commands the debugger is to perform when the event
		triggers.

If the process list, condition, or command list are too long to fit in their
columns, they are truncated.  You may force them to be wrapped to the next
line with the \k(Panes) option in the \k(Properties) menu.

The Event Window also includes the following menu buttons:

	\k(File button)
	\k(Edit button)
	\k(Event button)
	\k(Properties button)
	Help button

The menus displayed by selecting these buttons provide commands to edit and
delete existing events or create new ones.  See the Help for the individual
buttons for details.

You may resize the Event Window.  You may also redistribute the space within
the window.  To do that, click SELECT on the border of the Main Event or the
On Stop Event pane.  A handle will appear, which you may drag up or down to
increase or decrease the size of the pane relative to the other pane.
^2^File button=File
^$41
5. \k(Event Window)
   5.1 File button

The File button gives you access to the debugger's windows.
Clicking MENU on the File button brings up a menu with
the following options:

	\k(Windows)
	\k(Dismiss)
	\k(Quit)
^3^Windows
^$411
5. \k(Event Window)
   5.1 \k(File button)
       5.1.1 Windows

Clicking SELECT on the Windows option will bring up a popup menu with
the following options:

	\k(Context^/usr/X/lib/locale/C/help/debug/context.help^Context Window)
	\k(Source^/usr/X/lib/locale/C/help/debug/source.help^Source Window)
	\k(Disassembly^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window)
	\k(Event^/usr/X/lib/locale/C/help/debug/event.help^Event Window)
	\k(Command^/usr/X/lib/locale/C/help/debug/command.help^Command Window)

These options correspond to the five windows in a \d(window set).  Selecting one of
the options in the popup menu will open that window.  The \k(Context^/usr/X/lib/locale/C/help/debug/context.help^Context Window) and
\k(Command^/usr/X/lib/locale/C/help/debug/command.help^Command Window) windows will always be available, but the other windows will be
available only if the window set contains at least one process.  Further, the
\k(Event Window^/usr/X/lib/locale/C/help/debug/event.help^Event Window) will not be available if the \d(current process) is a core image.
^3^Dismiss
^$412
5. \k(Event Window)
   5.1 \k(File button)
       5.1.2 Dismiss

The Dismiss option is identical to the \k(Dismiss^/usr/X/lib/locale/C/help/debug/context.help^Dismiss) option
in the \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window).
^3^Quit
^$413
5. \k(Event Window)
   5.1 \k(File button)
       5.1.3 Quit

The Quit option is identical to the \k(Quit^/usr/X/lib/locale/C/help/debug/context.help^Quit) option
in the \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window).
^2^Edit button=Edit
^$42
5. \k(Event Window)
   5.2 Edit button

Clicking MENU on the Edit button brings up a menu with options to let you
manipulate selected events.  The options are:

	\k(Disable)
	\k(Enable)
	\k(Delete)
^3^Disable
^$421
5. \k(Event Window)
   5.2 \k(Edit button)
       5.2.1 Disable

Clicking SELECT on the Disable button disables the selected events.
Disabled events have no affect on the processes they apply to, but
are not deleted.  They may be reinstated with \k(Enable).

One or more events in both panes may be selected.  This option is not
available if the selected events are already disabled.
^3^Enable
^$422
5. \k(Event Window)
   5.2 \k(Edit button)
       5.1.2 Enable

Clicking SELECT on the Enable button enables the selected events.  One or
more \k(disabled^^Disable) events in both panes may be selected.  This option
is not available if the selected events are not disabled.  Once enabled,
an event will again affect the process it is enabled in.
^3^Delete
^$423
5. \k(Event Window)
   5.2 \k(Edit button)
       5.2.3 Delete

Clicking SELECT on the Delete button deletes all selected events.
This option is not available if you have not selected any events.
^2^Event button=Event
^$43
5. \k(Event Window)
   5.3 Event button

The Event button in the \k(Event Window) lets you create
and edit events in the \d(current process).  Clicking
MENU on the Event button brings up a menu with the
following options:

	\k(Change)
	\k(Stop)
	\k(Signal)
	\k(Syscall)
	\k(On Stop)
^3^Change
^$431
5. \k(Event Window)
   5.3 \k(Event button)
       5.3.1 Change

The Change option provides a popup window that lets you
edit an existing event.  This option is available only
if you have selected one event, in either pane.  The
popup window will look like one of the \k(Stop^/usr/X/lib/locale/C/help/debug/popup.help^Stop), \k(Signal^/usr/X/lib/locale/C/help/debug/popup.help^Signal),
\k(Syscall^/usr/X/lib/locale/C/help/debug/popup.help^Syscall), or \k(On Stop^/usr/X/lib/locale/C/help/debug/popup.help^On Stop) windows, depending on the
type of the event you had selected.  The fields in the
window will be initialized with values from the selected
event.  You may then change any of the fields.  When
you finish, the changes you make will be reflected in the
Event Window.
^3^Stop
^$432
5. \k(Event Window)
   5.3 \k(Event button)
       5.3.2 Stop

The Stop option provides a popup window that lets you create a \d(stop event).
A stop event specifies some condition in the program's address space that will
make the debugger stop the program's execution.  The new event will apply to
the \d(current program).  See the \k(Stop^/usr/X/lib/locale/C/help/debug/popup.help^Stop) section under
\k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows) for a description of the this window.
^3^Signal
^$433
5. \k(Event Window)
   5.3 \k(Event button)
       5.3.3 Signal

The Signal option provides a popup window that lets you create a \d(signal event).
A signal event specifies an action to be executed whenever the process receives
a particular signal.  The new event will apply to the \d(current program).
See the \k(Signal^/usr/X/lib/locale/C/help/debug/popup.help^Signal) section under \k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows)
for a description of this window.
^3^Syscall
^$434
5. \k(Event Window)
   5.3 \k(Event button)
       5.3.4 Syscall

The Syscall option provides a popup window that lets you create a
\d(syscall event).  A syscall event specifies an action to be executed
whenever the process enters or exits a particular system call.  The new event
will apply to the \d(current program).  See the \k(Syscall^/usr/X/lib/locale/C/help/debug/popup.help^Syscall) section under
\k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows) for a description of this window.
^3^On Stop
^$435
5. \k(Event Window)
   5.3 \k(Event button)
       5.3.5 On Stop

The On Stop option provides a popup window that lets you create an \d(onstop event).
An onstop event specifies an action to be executed whenever the process stops.
The new event will apply to the \d(current program).  See the \k(On Stop^/usr/X/lib/locale/C/help/debug/popup.help^On Stop)
section under \k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows) for a description of this window.
^3^Ignore Signals
^$436
5. \k(Event Window)
   5.3 \k(Event button)
       5.3.6 Ignore Signals

The Ignore Signals option provides a popup window that lets you specify the
disposition (either caught or ignored) of each signal for the \d(current process).
See the \k(Ignore Signals^/usr/X/lib/locale/C/help/debug/popup.help^Ignore Signals) section under \k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows)
for a description of this window.
^2^Properties button=Properties
^$44
5. \k(Event Window)
   5.4 Properties button

The Properties button lets you customize several aspects of
the debugger's behavior.  Clicking MENU on the Properties
button in the \k(Event Window) brings up a menu with the
following options:

	\k(Panes)
	\k(Granularity)
^3^Panes
^$441
5. \k(Event Window)
   5.4 \k(Properties button)
       5.4.1 Panes

The Panes option provides a popup window that lets you choose whether certain
columns in the \k(Event Window)'s  panes are wrapped or truncated if the
information will not fit in the column.  See the \k(Panes - Event Window^/usr/X/lib/locale/C/help/debug/popup.help^Panes - Event Window) section
under \k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows) for a description of this window.
^3^Granularity
^$442
5. \k(Event Window)
   5.4 \k(Properties button)
       5.4.2 Granularity

The Granularity option provides a popup window that lets you specify the
debugger's behavior with respect to programs and processes.  See the
\k(Granularity^/usr/X/lib/locale/C/help/debug/popup.help^Granularity) section under \k(Popup Windows^/usr/X/lib/locale/C/help/debug/popup.help^Popup Windows) for a description of this window.
^1^Command Window
^$5
6. \k(Command Window^/usr/X/lib/locale/C/help/debug/command.help^Command Window)

The Command Window has three parts:

	the Status Pane,
	the \k(Transcript Pane^/usr/X/lib/locale/C/help/debug/command.help^Transcript Pane), and
	the \k(Command Line^/usr/X/lib/locale/C/help/debug/command.help^Command Line).

The Status Pane is identical to the Status Pane in the \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window).
The Command Window displays a transcript of the debugging session (debugger
and process input and output) in the \k(Transcript Pane^/usr/X/lib/locale/C/help/debug/command.help^Transcript Pane). The \k(Command Line^/usr/X/lib/locale/C/help/debug/command.help^Command Line)
is used to to enter debugger commands as if you were using the command line
interface.

The Command Window also includes the following menu
buttons:
	\k(File button^/usr/X/lib/locale/C/help/debug/command.help^File button)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/command.help^Edit button)
	\k(Properties button^/usr/X/lib/locale/C/help/debug/command.help^Properties button)
	Help button
^1^Popup Windows
7. Popup Windows

The debugger provides a number of popup windows to allow you to view more
information, manipulate the processes being debugged, and control the debugger's
behavior.  The windows that are available include:

    \k(Cancel^/usr/X/lib/locale/C/help/debug/popup.help^Cancel)		    \k(Language^/usr/X/lib/locale/C/help/debug/popup.help^Language)		\k(Show Function - Source^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Source)
    \k(Change^/usr/X/lib/locale/C/help/debug/popup.help^Change)		 \k(Map^/usr/X/lib/locale/C/help/debug/popup.help^Map)			\k(Show Function - Disassembly^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Disassembly)
    \k(Change Directory^/usr/X/lib/locale/C/help/debug/popup.help^Change Directory)	    \k(On Stop^/usr/X/lib/locale/C/help/debug/popup.help^On Stop)			\k(Show Line^/usr/X/lib/locale/C/help/debug/popup.help^Show Line)
    \k(Create^/usr/X/lib/locale/C/help/debug/popup.help^Create)		    \k(Open^/usr/X/lib/locale/C/help/debug/popup.help^Open)			\k(Show Location^/usr/X/lib/locale/C/help/debug/popup.help^Show Location)
    \k(Dump^/usr/X/lib/locale/C/help/debug/popup.help^Dump)		    \k(Output Action^/usr/X/lib/locale/C/help/debug/popup.help^Output Action)		\k(Show Value^/usr/X/lib/locale/C/help/debug/popup.help^Show Value)
    \k(Expand^/usr/X/lib/locale/C/help/debug/popup.help^Expand)		 \k(Panes - Context Window^/usr/X/lib/locale/C/help/debug/popup.help^Panes - Context Window)	\k(Signal^/usr/X/lib/locale/C/help/debug/popup.help^Signal)
    \k(Grab Core^/usr/X/lib/locale/C/help/debug/popup.help^Grab Core)	    \k(Panes - Event Window^/usr/X/lib/locale/C/help/debug/popup.help^Panes - Event Window)	\k(Source Path^/usr/X/lib/locale/C/help/debug/popup.help^Source Path)
    \k(Grab Process^/usr/X/lib/locale/C/help/debug/popup.help^Grab Process)	    \k(Recreate^/usr/X/lib/locale/C/help/debug/popup.help^Recreate)		\k(Step^/usr/X/lib/locale/C/help/debug/popup.help^Step)
    \k(Granularity^/usr/X/lib/locale/C/help/debug/popup.help^Granularity)	    \k(Run Until^/usr/X/lib/locale/C/help/debug/popup.help^Run Until)		\k(Stop^/usr/X/lib/locale/C/help/debug/popup.help^Stop)
    \k(Ignore Signals^/usr/X/lib/locale/C/help/debug/popup.help^Ignore Signals)	    \k(Script^/usr/X/lib/locale/C/help/debug/popup.help^Script)			\k(Stop on Function^/usr/X/lib/locale/C/help/debug/popup.help^Stop on Function)
    \k(Input^/usr/X/lib/locale/C/help/debug/popup.help^Input)		    \k(Search^/usr/X/lib/locale/C/help/debug/popup.help^Search)			\k(Symbols^/usr/X/lib/locale/C/help/debug/popup.help^Symbols)
    \k(Jump^/usr/X/lib/locale/C/help/debug/popup.help^Jump)		    \k(Set Value^/usr/X/lib/locale/C/help/debug/popup.help^Set Value)		\k(Syscall^/usr/X/lib/locale/C/help/debug/popup.help^Syscall)
    \k(Kill^/usr/X/lib/locale/C/help/debug/popup.help^Kill)		
