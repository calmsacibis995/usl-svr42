#ident	"@(#)debugger:catalog.d/common/debug.help	1.3"
^*version^1
^*title^Debug
^:Debugger
^+/usr/X/lib/locale/C/help/debug/debug.defs
^?A multi-process source-level debugger

^1^Overview
^$0
1. Overview

Debug is a symbolic, source-level debugger with many capabilities,
including control over multiple processes and evaluation of complex
expressions in C or C++.  The debugger has five main windows:

    The \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window) always appears when you invoke the debugger.
    This window displays the processes under the debugger's control, and
    the stack trace and symbols for the \d(current process).

    The \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window) displays the program's source.  Whenever the
    process stops, the source window is updated to display the current
    line in the current file.  You may also examine other files, and set
    and delete breakpoints.

    The \k(Disassembly Window^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window) displays the disassembly of the current
    function and the state of the registers.  The window is updated
    whenever the process stops.

    The \k(Event Window^/usr/X/lib/locale/C/help/debug/event.help^Event Window) displays events (breakpoints, watchpoints,
    system call events, etc.).  Deleting, disabling, enabling, and editing
    events is done from this window.

    The \k(Command Window^/usr/X/lib/locale/C/help/debug/command.help^Command Window) keeps a log of all the events as they occur.
    Process I/O is also displayed here.  This window allows you to enter
    commands as if you were using the command line version of the debugger.

The \k(Context^/usr/X/lib/locale/C/help/debug/context.help^Context Window), \k(Disassembly^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window), \k(Event^/usr/X/lib/locale/C/help/debug/event.help^Event Window), \k(Command^/usr/X/lib/locale/C/help/debug/command.help^Command Window), and one or more \k(Source^/usr/X/lib/locale/C/help/debug/source.help^Source Window) windows
make up a \d(window set).  Each window set controls a subset of the
processes being debugged, and each process belongs to exactly one window
set.  If you are debugging only one process, you will not need more than
one window set, but if you are debugging multiple processes, you may wish
to debug each process in a separate window set.  Window sets are created
by the \k(New Window Set^/usr/X/lib/locale/C/help/debug/context.help^New Window Set) option in the \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window)'s \k(File^/usr/X/lib/locale/C/help/debug/context.help^File) menu.
^2^Invoking the Debugger
^$11
1. \k(Overview)
   1.1 Invoking the Debugger

From the Desktop metaphor, the debugger may be invoked in any of
three ways:

1) By dragging an object file from a folder and dropping it onto the
   debugger's icon in the Applications folder.  This will start the debugger
   with the dropped object file as a created process.  This has the advantage
   of making the debugger's current working directory the same as the folder
   in which the object file appears.  The disadvantage is that you cannot
   give the debugger or created process any options, or redirect the debugged
   process's I/O.  Also, you cannot drag and drop a core file onto the
   debugger's icon.

2) By double clicking on the debugger's icon in the Applications folder.
   This will start up the debugger with an empty Context Window.  From there,
   you may create or grab processes with the options in the File menu.  This
   will let you pass options to the debugged processes, but not to the
   debugger itself.  This method also has the disadvantage that the
   debugger's current working directory may have no connection with the
   directory of the file you want to debug.  You can set the current working
   directory with the Change Directory option in the Context Window's
   File menu.

3) By typing "debug options" in an xterm window.  Even though you
   type a command to start the debugger, this will still invoke the graphical
   interface.  You may, however, use the command line interface by typing
   debug -ic (ic for interface, character).

   Although this is more work than clicking on an icon, this method is the
   most flexible, allowing you to create processes with options, grab
   running processes, or grab core files from the command line.  See debug(1)
   for the options available.

   The -X option, which lets you pass options to the X server, is the
   only option that is specific to the graphical user interface.  You can use
   the -X option to specific such things as fonts and colors.
   For example,
	debug -X"-background green"
   will make the green the background color for all the debugger's windows,
   and
	debug -X '-xrm "debug*Context*background: green"'
   will set the background color in the Context Window only.  Note that the
   -X option takes only one argument,  so any option that you want to pass
   through with whitespace in it must be quoted.

   In this method, the debugger's current working directory will be
   the same as the xterm window's.

In all three cases, you may create or grab additional processes with the
options in the \k(Context Window^/usr/X/lib/locale/C/help/debug/context.help^Context Window)'s \k(File^/usr/X/lib/locale/C/help/debug/context.help^File) menu.  See the sections on \k(Create^/usr/X/lib/locale/C/help/debug/popup.help^Create),
\k(Grab Process^/usr/X/lib/locale/C/help/debug/popup.help^Grab Process), and \k(Grab Core^/usr/X/lib/locale/C/help/debug/popup.help^Grab Core) for details.
^1^Context Window
^$1
2. Context Window

The Context Window is the debugger's central window.
The window consists of three panes:

	\k(Process Pane)
	\k(Stack Pane)
	\k(Symbol Pane)

The \k(Process Pane) displays the state of the processes being debugged.
The process shown with the pointing hand is the \d(current process).
The \k(Stack Pane) displays the stack trace for the current process;
the frame shown with the pointing hand is the \d(current frame).  Together,
the current process and the current frame define the \d(current context).
The \k(Symbol Pane) displays the values of the variables visible in
the current context.

The Context Window includes the following menu buttons:

	\k(File button)
	\k(Edit button)
	\k(View button)
	\k(Control button)
	\k(Event button)
	\k(Properties button)
	Help button

The menus displayed by selecting these buttons provide commands to control
the state of the processes, options to change the information displayed,
and more.  See the Help sections for the individual buttons for details.

You may resize the Context Window.  You may also redistribute the space
within the window.  To do that, click SELECT on the border of any of the panes.
A handle will appear, which you may drag up or down to increase or decrease
the size of the pane relative to the other panes.
^1^Source Window
^$2
3. \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window)

The Source Window is made up of two panes, the Status Pane and the Source Pane.
The Source Window also includes the following menu buttons:

	\k(File button^/usr/X/lib/locale/C/help/debug/source.help^File button)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/source.help^Edit button)
	\k(View button^/usr/X/lib/locale/C/help/debug/source.help^View button)
	\k(Control button^/usr/X/lib/locale/C/help/debug/source.help^Control button)
	\k(Event button^/usr/X/lib/locale/C/help/debug/source.help^Event button)
	\k(Properties button^/usr/X/lib/locale/C/help/debug/source.help^Properties button)
	Help button

The Status Pane indicates the \d(current context), that is, the \d(current process),
its state, and if stopped, the function name and line number or address of the
\d(current frame).

The Source Pane of the \d(primary source window) displays the current source file.
Whenever the \d(current process) stops, the file is positioned to display the
current line in the current function.  The current line is highlighted, and also
indicated by an arrow in the left margin.  If there is no current file, or the file
was not compiled with debugging information, the Source Pane will be empty.
The Source Pane will also be empty if the debugger cannot find the current file;
in that case you can use the \k(Source Path^/usr/X/lib/locale/C/help/debug/popup.help^Source Path) popup window to tell the debugger where
to find the file.

A stop sign appears in the left margin for each line that has a breakpoint set
on it.  You may set or remove a breakpoint on a selected line with the
\k(Set Breakpoint^/usr/X/lib/locale/C/help/debug/source.help^Set Breakpoint) and \k(Delete Breakpoint^/usr/X/lib/locale/C/help/debug/source.help^Delete Breakpoint) options.

You may also view other files in the Source Pane, either by opening another
file from the list in the \k(Open^/usr/X/lib/locale/C/help/debug/popup.help^Open) popup window, or by viewing a different
function from the list in the \k(Show Function^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Source) popup window.

You may have more than one Source Window in a \d(window set).  The first
(or primary) Source Window is the one you get when you select the Source
Window button in the \k(Windows^/usr/X/lib/locale/C/help/debug/source.help^Windows) menu.  The primary window is always updated
to show the current source line whenever the \d(current process) stops.

Secondary Source Windows are created by selecting the \k(New Source^/usr/X/lib/locale/C/help/debug/source.help^New Source) option
in the \k(File^/usr/X/lib/locale/C/help/debug/source.help^File) menu, and are indicated by an asterisk ('*') in the window
header.  The Source Pane of a secondary window is not updated when the
current process stops.
^1^Disassembly Window
^$3
4. \k(Disassembly Window^/usr/X/lib/locale/C/help/debug/dis.help^Disassembly Window)

The Disassembly Window has three parts: the Status Pane, the Registers Pane,
and the Disassembly Pane.  The Status Pane is identical to the Status Pane
in the \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window).  The Registers Pane displays the values
of the \d(current process)'s registers whenever the process stops.
The Disassembly Pane shows the disassembly of the current function.
You may also view the disassembly of other functions with the
\k(Show Function^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Disassembly) option in the \k(View^/usr/X/lib/locale/C/help/debug/dis.help^View) menu.

The Disassembly Window includes the following menu buttons:

	\k(File button^/usr/X/lib/locale/C/help/debug/dis.help^File)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/dis.help^Edit)
	\k(View button^/usr/X/lib/locale/C/help/debug/dis.help^View)
	\k(Control button^/usr/X/lib/locale/C/help/debug/dis.help^Control)
	\k(Event button^/usr/X/lib/locale/C/help/debug/dis.help^Event)
	Help button

The menus displayed by selecting these buttons provide commands to control
the state of the current process, options to change the information displayed,
and more.  See the Help sections for the individual buttons for details.

You may resize the Disassembly Window.  You may also redistribute the space
within the window.  To do that, click SELECT on the border of the Registers
pane or the Disassembly pane.  A handle will appear, which you may drag up
or down to increase or decrease the size of the pane relative to the other pane.
^1^Event Window
^$4
5. \k(Event Window^/usr/X/lib/locale/C/help/debug/event.help^Event Window)

The Event Window has three parts: the Status Pane, the Main Event Pane,
and the On Stop Event Pane.  The Status Pane is identical to the Status Pane
in the \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window).  The Main Event Pane displays the \d(stop event)s,
\d(signal event)s, and \d(syscall event)s for the \d(current process).  The
On Stop Pane displays the \d(onstop event)s for the current process.  The
information displayed for each event may include:

    ID		The event number.  You will also see the character 'D' next to
		the number if the event has been \k(Disabled^/usr/X/lib/locale/C/help/debug/event.help^Disable).

    Type		STOP, SIGNAL, or SYSCALL.  The type for a syscall
		event also includes the characters 'E' or 'X', for system call
		entry or exit, respectively.

    Processes	The processes for which the event is set.

    Condition	For stop events, the \k(Stop Expression^/usr/X/lib/locale/C/help/debug/popup.help^Stop Expression) is the condition.
		For signal events, this is the list of signals the events
		applies to.  For  syscall events, it is the list of
		affected system calls.

    Count		For stop and syscall events, the number of times the
		condition occurs before the event triggers.

    Command List	The commands the debugger is to perform when the event
		triggers.

If the process list, condition, or command list are too long to fit in their
columns, they are truncated.  You may force them to be wrapped to the next
line with the \k(Panes^/usr/X/lib/locale/C/help/debug/event.help^Panes) option in the \k(Properties^/usr/X/lib/locale/C/help/debug/event.help^Properties) menu.

The Event Window also includes the following menu buttons:

	\k(File button^/usr/X/lib/locale/C/help/debug/event.help^File)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/event.help^Edit)
	\k(Event button^/usr/X/lib/locale/C/help/debug/event.help^Event)
	\k(Properties button^/usr/X/lib/locale/C/help/debug/event.help^Properties)
	Help button

The menus displayed by selecting these buttons provide commands to edit and
delete existing events or create new ones.  See the Help for the individual
buttons for details.

You may resize the Event Window.  You may also redistribute the space within
the window.  To do that, click SELECT on the border of the Main Event or the
On Stop Event pane.  A handle will appear, which you may drag up or down to
increase or decrease the size of the pane relative to the other pane.
^1^Command Window
^$5
6. \k(Command Window^/usr/X/lib/locale/C/help/debug/command.help^Command Window)

The Command Window has three parts:

	the Status Pane,
	the \k(Transcript Pane^/usr/X/lib/locale/C/help/debug/command.help^Transcript Pane), and
	the \k(Command Line^/usr/X/lib/locale/C/help/debug/command.help^Command Line).

The Status Pane is identical to the Status Pane in the \k(Source Window^/usr/X/lib/locale/C/help/debug/source.help^Source Window).
The Command Window displays a transcript of the debugging session (debugger
and process input and output) in the \k(Transcript Pane^/usr/X/lib/locale/C/help/debug/command.help^Transcript Pane). The \k(Command Line^/usr/X/lib/locale/C/help/debug/command.help^Command Line)
is used to to enter debugger commands as if you were using the command line
interface.

The Command Window also includes the following menu
buttons:
	\k(File button^/usr/X/lib/locale/C/help/debug/command.help^File button)
	\k(Edit button^/usr/X/lib/locale/C/help/debug/command.help^Edit button)
	\k(Properties button^/usr/X/lib/locale/C/help/debug/command.help^Properties button)
	Help button
^1^Popup Windows
7. Popup Windows

The debugger provides a number of popup windows to allow you to view more
information, manipulate the processes being debugged, and control the debugger's
behavior.  The windows that are available include:

    \k(Cancel^/usr/X/lib/locale/C/help/debug/popup.help^Cancel)		    \k(Language^/usr/X/lib/locale/C/help/debug/popup.help^Language)		\k(Show Function - Source^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Source)
    \k(Change^/usr/X/lib/locale/C/help/debug/popup.help^Change)		 \k(Map^/usr/X/lib/locale/C/help/debug/popup.help^Map)			\k(Show Function - Disassembly^/usr/X/lib/locale/C/help/debug/popup.help^Show Function - Disassembly)
    \k(Change Directory^/usr/X/lib/locale/C/help/debug/popup.help^Change Directory)	    \k(On Stop^/usr/X/lib/locale/C/help/debug/popup.help^On Stop)			\k(Show Line^/usr/X/lib/locale/C/help/debug/popup.help^Show Line)
    \k(Create^/usr/X/lib/locale/C/help/debug/popup.help^Create)		    \k(Open^/usr/X/lib/locale/C/help/debug/popup.help^Open)			\k(Show Location^/usr/X/lib/locale/C/help/debug/popup.help^Show Location)
    \k(Dump^/usr/X/lib/locale/C/help/debug/popup.help^Dump)		    \k(Output Action^/usr/X/lib/locale/C/help/debug/popup.help^Output Action)		\k(Show Value^/usr/X/lib/locale/C/help/debug/popup.help^Show Value)
    \k(Expand^/usr/X/lib/locale/C/help/debug/popup.help^Expand)		 \k(Panes - Context Window^/usr/X/lib/locale/C/help/debug/popup.help^Panes - Context Window)	\k(Signal^/usr/X/lib/locale/C/help/debug/popup.help^Signal)
    \k(Grab Core^/usr/X/lib/locale/C/help/debug/popup.help^Grab Core)	    \k(Panes - Event Window^/usr/X/lib/locale/C/help/debug/popup.help^Panes - Event Window)	\k(Source Path^/usr/X/lib/locale/C/help/debug/popup.help^Source Path)
    \k(Grab Process^/usr/X/lib/locale/C/help/debug/popup.help^Grab Process)	    \k(Recreate^/usr/X/lib/locale/C/help/debug/popup.help^Recreate)		\k(Step^/usr/X/lib/locale/C/help/debug/popup.help^Step)
    \k(Granularity^/usr/X/lib/locale/C/help/debug/popup.help^Granularity)	    \k(Run Until^/usr/X/lib/locale/C/help/debug/popup.help^Run Until)		\k(Stop^/usr/X/lib/locale/C/help/debug/popup.help^Stop)
    \k(Ignore Signals^/usr/X/lib/locale/C/help/debug/popup.help^Ignore Signals)	    \k(Script^/usr/X/lib/locale/C/help/debug/popup.help^Script)			\k(Stop on Function^/usr/X/lib/locale/C/help/debug/popup.help^Stop on Function)
    \k(Input^/usr/X/lib/locale/C/help/debug/popup.help^Input)		    \k(Search^/usr/X/lib/locale/C/help/debug/popup.help^Search)			\k(Symbols^/usr/X/lib/locale/C/help/debug/popup.help^Symbols)
    \k(Jump^/usr/X/lib/locale/C/help/debug/popup.help^Jump)		    \k(Set Value^/usr/X/lib/locale/C/help/debug/popup.help^Set Value)		\k(Syscall^/usr/X/lib/locale/C/help/debug/popup.help^Syscall)
    \k(Kill^/usr/X/lib/locale/C/help/debug/popup.help^Kill)		
