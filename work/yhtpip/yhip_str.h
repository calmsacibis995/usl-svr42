
/*****************************************************
 *
 * SVR 4.2 STREAMS YHTP - Release 1.0 
 *
 * Copyright 1994 NET612 Computer Department of NUDT 
 * All Rights Reserved. 
 *
 ****************************************************/



#ifndef _NET_YHTPIP_YHIP_STR_H
#define _NET_YHTPIP_YHIP_STR_H

#ifdef _KERNEL_HEADERS

#ifndef _UTIL_TYPES_H
#include <util/types.h>		/* REQUIRED */
#endif

#ifndef _IO_STREAM_H
#include <io/stream.h>		/* REQUIRED */
#endif

#ifndef _NET_YHTPIP_YHIN_H
#include <net/yhtpip/yhin.h>	/* REQUIRED */
#endif

#ifndef _NET_YHTPIP_YHIN_VAR_H
#include <net/yhtpip/yhin_var.h>	/* REQUIRED */
#endif

#ifndef _NET_YHTPIP_YHIF_H
#include <net/yhtpip/yhif.h>	/* REQUIRED */
#endif

#ifndef _NET_YHTPIP_YHROUTE_H
#include <net/yhtpip/yhroute.h>	/* REQUIRED */
#endif

#elif defined(_KERNEL)

#include <sys/types.h>		/* REQUIRED */
#include <sys/stream.h>		/* REQUIRED */
#include <netinet/in.h>		/* REQUIRED */
#include <netinet/in_var.h>	/* REQUIRED */
#include <net/if.h>		/* REQUIRED */
#include <net/route.h>		/* REQUIRED */

#endif /* _KERNEL_HEADERS */

/*
 * Definitions for stream driver control of the Internet Protocol. This
 * module defines the structures related to controlling the streams interface
 * itself, the structures related to various other protocol elements are in
 * other files. 
 */

#define NIP		8	/* Number of minor devices supported */
#define IP_PROVIDERS	16	/* Max Number of link level service providers */
#define IP_SAP		0x800	/* SAP for IP protocol - currently enet type */
#define YHIP_SAP	0x801	/* SAP for YHIP protocol */
#define ARP_SAP		0x806	/* SAP for ARP */
#define YHARP_SAP	0x807	/* SAP for YHARP */

struct ip_pcb {
	queue_t        *ip_rdq;	/* Upper read queue for this client */
	ushort          ip_proto;	/* Client protocol number set with
					 * N_BIND */
	ushort          ip_state;	/* State flags for this client, see
					 * below */
};

#define IPOPEN	1		/* Minor device open when set */

struct ip_provider {		/* The description of each link service */
	char            name[IFNAMSIZ];	/* provider name (e.g., emd1) */
	queue_t        *qbot;		/* lower write queue */
	queue_t        *qtop;		/* upper write queue for link/unlink */
	mblk_t         *linkbp;		/* iocblk for linke/unlink */
	int             l_index;	/* unique ID of lower stream */
	int             if_flags;	/* up/down, broadcast, etc. */
	int             if_metric;	/* routing metric (external only) */
	int             if_maxtu;	/* maximum transmission unit */
	int             if_mintu;	/* minimum transmission unit */
	struct in_ifaddr ia;	/* address chain structure maintained by if */

#define SOCK_INADDR(sock) (&(((struct sockaddr_in *)(sock))->sin_addr))
#define PROV_INADDR(prov) SOCK_INADDR(&((prov)->ia.ia_ifa.ifa_addr))

	/* The following defines are vestiges of */
	/* the socket based ip implementation */
#define if_addr		ia.ia_ifa.ifa_addr
						/* interface address */
#define	if_broadaddr	ia.ia_broadaddr
						/* broadcast address */
#define	if_dstaddr	ia.ia_dstaddr 
						/* other end of p-to-p link */
	mblk_t         *unswitch;	/* ioctl pointer for switched routes */
};

/*
 * A special version of the unitdata request to be sent down through ip -> it
 * contains various ip specific extensions to the base structure 
 */

struct ip_unitdata_req {
	ulong		dl_primitive;		/* always N_UNITDATA_REQ */
	ulong		dl_dest_addr_length;	/* dest NSAP addr length - 
						 * 4 for ip */
	ulong		dl_dest_addr_offset;	/* dest NSAP addr offset */
	ulong		dl_reserved[2];
	mblk_t		*options;		/* options for ip */
	struct route	route;			/* route for packet to follow */
	int		flags;
	struct in_addr	ip_addr;		/* the ip destination addr */
};


/*
 * ip_ctlmsg is the structure used to send control messages to the client
 * upper level protocols.  These messages are actually generated by icmp and
 * are passed down to ip to distribute among the clients. 
 */

struct ip_ctlmsg {
	int             command;
	struct in_addr  src_addr;
	struct in_addr  dst_addr;
	u_short		src_port;
	u_short		dst_port;
	int             proto;
};

#endif	/* _NET_YHTPIP_YHIP_STR_H */
