#ident	"@(#)pkg.base:i386/pkg/base/ifiles/postinstall	1.14.11.102"
#ident	"$Header: $"

# For an UPGRADE/OVERLAY, I may want to see what's going on here

[ -f /etc/inst/up/updebug.sh ] && . /etc/inst/up/updebug.sh

[ "$UPDEBUG" = "YES" ] && set -x && goany

turnoff () {
cd /etc/conf/sdevice.d
for i in $*
do
if [ -f $i ]
then
ed $i << END > /dev/null 2>&1
1,\$s/	Y	/	N	/
w
w
q
END
fi
done
}

turnon () {
cd /etc/conf/sdevice.d
for i in $*
do
if [ -f $i ]
then
ed $i << END > /dev/null 2>&1
1,\$s/	N	/	Y	/
w
w
q
END
fi
done
}

turnon clone connld fdfs intmap intp ipc msg nmi
turnon osm prf sem shm weitek xt lp 
# for debugging
#turnon kdb kdb-util
turnoff oxt kmacct

# make adminrole essentially a null command as per ul92-04303
echo "exit 0" > /usr/bin/adminrole
installf ${PKGINST} /usr/bin/adminrole  f 0700 root sys 

error=no
while read from to comment
do
	echo $to 		# for installf

	# The following is being added to support Upgrade Installation.
	# This eliminates lots of WARNINGS about identical files.
	rm -f $to

	cp $from $to >&2 || error=yes
done <<!ENDOFLIST! | installf $PKGINST -
	/etc/fs/bfs/fstyp /usr/lib/fs/bfs/fstyp
	/etc/fs/bfs/mkfs /usr/lib/fs/bfs/mkfs
	/etc/fs/sfs/mkfs /usr/lib/fs/sfs/mkfs
	/sbin/fstyp /usr/sbin/fstyp
	/sbin/mkfs /usr/sbin/mkfs
	/sbin/mklost+found /usr/sbin/mklost+found
	/sbin/rc1 /usr/sbin/rc1
	/sbin/rc3 /usr/sbin/rc3
	/usr/lib/fs/sfs/fstyp /etc/fs/sfs/fstyp
	/usr/bin/dd /sbin/dd                        # required by cmds pkg
!ENDOFLIST!

# /sbin/jsh is now hard-linked to /sbin/sh in sysutil file

# Set up node name via environment variable NODE
[ -n "${NODE}" ] && setuname -n "${NODE}"


# Create files for the TCB and set security attributes.
# The $from files will not have their security attributes
# set unless they are installed by the ICD *only* (they're
# marked by having ICD present in the $installer field.)
# Otherwise the $from file has been installed by the OAM 
# portion of EU with all their necessary security attributes.
#
# NOTE: files that are being installed by the OAM-EU, that also
# require privilege, are candidates for having their privilege
# set fall out of sync with those specified in the prototype file.
# Since there isn't a user level command to see the privileges
# set for those files at this point, this script *must* be kept
# in sync with the prototype files.

while read from to mac fixed inher installer
do
	# Check for comments.
	test "$from" = "#" && continue

	# The following is being added to support Upgrade Installation.
	# This eliminates lots of WARNINGS about identical files.
	rm -f $to

	cp $from $to >&2 || error=yes
	# Only set the security attributes for the $from file
	# if it's been installed by the ICD. Otherwise it's been
	# taken care of by the EU OAM prototype.
	test "$installer" = "ICD" &&
		installf ${PKGINST} $from f \? \? \? $mac $fixed $inher

	installf ${PKGINST} $to f \? \? \? $mac $fixed $inher
done <<!ENDOFLIST! 
	/etc/fs/bfs/fsck /usr/lib/fs/bfs/fsck 2 NULL dacread,dacwrite,macwrite,compat,dev ICD
	/etc/fs/bfs/mount /usr/lib/fs/bfs/mount 2 NULL mount,dacwrite,macwrite ICD
	/etc/fs/sfs/fsck /usr/lib/fs/sfs/fsck 2 NULL dacread,dacwrite,dev,compat,macread,macwrite ICD
	/etc/fs/sfs/mount /usr/lib/fs/sfs/mount 2 NULL mount,dacwrite,macwrite,setflevel,macread,dacread ICD
	/sbin/autopush /usr/sbin/autopush 2 NULL dev,driver,dacread,dacwrite,macread,macwrite
	/sbin/bcheckrc /usr/sbin/bcheckrc 2 NULL sysops,macwrite,dacwrite,setflevel,dev,mount,macread,dacread,compat,owner
	/sbin/brc /usr/sbin/brc 2 NULL NULL
	/sbin/fsck /usr/sbin/fsck 2 NULL macread,macwrite,dacread,dacwrite,dev,compat
	/sbin/init /usr/sbin/init 2 NULL audit,owner,dev,dacwrite,macwrite,macread ICD
	/sbin/mknod /usr/sbin/mknod 1 NULL dacread,macread,dacwrite,macwrite,fsysrange,filesys,owner
	/sbin/mount /usr/sbin/mount 1 NULL mount,dacwrite,dacread,macwrite,macread,setflevel,owner
	/sbin/mountall /usr/sbin/mountall 2 NULL mount,dacwrite,dacread,macwrite,macread,setflevel,dev,compat,setspriv,setupriv,owner
	/sbin/putdev /usr/bin/putdev 2 NULL macwrite,setflevel,owner
	/sbin/rc0 /usr/sbin/rc0 2 NULL mount,setflevel,macwrite,dacwrite,macread,dacread,compat,owner,dev,sysops,driver,fsysrange,audit,setplevel
	/sbin/rc2 /usr/sbin/rc2 2 NULL sysops,macread,macwrite,dacwrite,dev,compat,mount,setflevel,setspriv,setupriv,dacread,filesys,multidir,driver,fsysrange,setplevel,audit,setuid,owner
	/sbin/rc6 /usr/sbin/rc6 2 NULL mount,setflevel,macwrite,dacwrite,macread,dacread,compat,owner,dev,sysops,driver,fsysrange
	/sbin/setclk /usr/sbin/setclk 2 NULL sysops
	# Although /sbin/sh is being installed by the ICD we're
	# not going to mark it here since it requires a seperate
	# set of privileges than the other shells.
	/sbin/sh /usr/bin/sh 1 NULL NULL
	/sbin/shutdown /usr/sbin/shutdown 2 NULL mount,setflevel,macwrite,dacwrite,macread,dacread,compat,owner,dev,sysops,driver,fsysrange,audit,setplevel
	/sbin/su /usr/bin/su 1 NULL macread,macwrite,setuid,audit,setflevel
	/sbin/uadmin /usr/sbin/uadmin 2 NULL sysops ICD
	/sbin/umount /usr/sbin/umount 2 NULL mount,setflevel,macwrite,macread,dacread,owner,dacwrite ICD
	/sbin/umountall /usr/sbin/umountall 2 NULL mount,setflevel,macwrite,dev,dacwrite,macread,dacread,owner,compat
	/etc/fs/sfs/df /usr/lib/fs/sfs/df 1 NULL macread,dacread,compat,dev ICD
	/usr/bin/who /sbin/who 1 NULL NULL
	/sbin/creatiadb /usr/sbin/creatiadb 2 NULL dacwrite,macwrite,setflevel
	/sbin/filepriv /usr/sbin/filepriv 1 NULL NULL
!ENDOFLIST!

# These files are installed by the ICD portion of the
# Essential Utilities package and are not included in the
# OAM portion. Therefore they must be installf'ed to make
# sure they have the correct [mac fixed inher].

# These files reside in TCB and are installed by ICD.

installf ${PKGINST} /sbin/sh f ? ? ? 1 NULL allprivs
installf ${PKGINST} /usr/bin/chmod f ? ? ? 1 NULL owner,macread,macwrite,dacread
installf ${PKGINST} /usr/bin/cpio f ? ? ? 1 NULL macread,macwrite,dacwrite,dacread,fsysrange,filesys,compat,owner,multidir,setplevel,setflevel
installf ${PKGINST} /usr/bin/expr f ? ? ? 1 NULL NULL
installf ${PKGINST} /usr/bin/false f ? ? ? 1 NULL NULL
installf ${PKGINST} /usr/bin/find f ? ? ? 1 NULL dacread,dacwrite,macread,macwrite,compat
installf ${PKGINST} /usr/bin/mv f ? ? ? 1 NULL macread,macwrite,dacread,dacwrite,owner,compat,fsysrange,filesys
installf ${PKGINST} /usr/bin/mkdir f ? ? ? 1 macupgrade multidir,setflevel,macread,dacread,macwrite,dacwrite,fsysrange
installf ${PKGINST} /usr/bin/rm f ? ? ? 1 NULL macread,macwrite,dacread,dacwrite,compat,filesys
installf ${PKGINST} /usr/bin/true f ? ? ? 1 NULL NULL
installf ${PKGINST} /sbin/sync f ? ? ? 2 NULL NULL

#make necessary links for files copied above
installf $PKGINST /usr/sbin/switchout=/usr/sbin/mkfs l

## hard link the other shells
installf $PKGINST /usr/bin/jsh=/usr/bin/sh l
installf $PKGINST /usr/lib/rsh=/usr/bin/sh l
installf $PKGINST /usr/sbin/sh=/usr/bin/sh l
installf $PKGINST /usr/sbin/jsh=/usr/bin/sh l

# These files do not reside in the TCB and are installed by ICD.

#   Installf the ICD portion which is not a part of TCB files. 

while read file type level
do
	installf ${PKGINST} $file $type 664 root root $level NULL NULL
done <<!ENDOFLIST!
	/etc/device.tab v 2
!ENDOFLIST!

if [ -d /dev/rmt ]
then
	installf ${PKGINST} /dev/rmt d \? \? \? 1 NULL NULL
fi

# SFS lost+found dirs get level from special file: SYS_PRIVATE

cat /etc/vfstab | while read dev rdev dir fstype junk
do
	case "${dev}" in
	/dev/dsk/c1d*s* | /dev/dsk/c1t1d*s* | /dev/idsk* )
		if [ ${fstype} = "sfs" ]
		then
			installf ${PKGINST} ${dir}/lost+found d \? \? \? 2 NULL NULL
		fi
		;;
	esac
done
installf ${PKGINST} /lost+found d \? \? \? 2 NULL NULL

# cmds with level: USER_PUBLIC

while read file type
do
	installf ${PKGINST} $file $type
done <<!ENDOFLIST!
	/etc/fs/s5/mount f
	/etc/fs/bfs/mkfs f
	/usr/bin/rmdir f
!ENDOFLIST!

# /sbin/setmnt sets these attributes for /etc/mnttab
installf ${PKGINST} /etc/mnttab v 0444 root sys 1 NULL NULL

#run creatiadb for new IA data files
/sbin/creatiadb

# append the SMTP cron entries to root's cron entries
if [ -f /var/spool/cron/crontabs/smtp ]
then
	cat /var/spool/cron/crontabs/smtp >> /var/spool/cron/crontabs/root
	rm /var/spool/cron/crontabs/smtp
fi

if [ ! -d /proc ]
then
	# make directory node for /proc since we
	# don't want to modify /proc if it is
	# already up and running!
	installf $PKGINST /proc d 555 root root || error=yes
fi

if [ ! -d /dev/fd ]
then
	installf $PKGINST /dev/fd d 555 root root || error=yes
fi

#
# install /var/sadm/install/contents since this file cannot be in pkgmap
# and needs to be contained in itself(two installf lines are needed)

# For an OVERLAY, the contents file already contains itself

[ "$PKGINSTALL_TYPE" != "OVERLAY" ] && {

	installf -c inst $PKGINST /var/sadm/install/contents v 0644 root root 
	installf -c inst $PKGINST /var/sadm/install/contents v ? ? ?
}

############################################
#
#
# echo directories to /etc/security/MLD/pkgcore file for 
# MLD creation, if ES gets installed.
#
echo "/var/mail" >>/etc/security/MLD/pkgcore
echo "/var/spool/cron/crontabs" >>/etc/security/MLD/pkgcore
echo "/var/spool/cron/atjobs" >>/etc/security/MLD/pkgcore

installf ${PKGINST} /etc/security/MLD/pkgcore f 0644 root sys 2 NULL NULL
##############################
## comment  out the following code for the time being

############################################
#
#The following defines the users for the TFM database.
#
#
#for user in root bin sys adm lp
#do
#    adminuser $user >/dev/null 2>&1 || adminuser -n $user
#done
#
#The following while-loop reads the commands and the users
#to which these commands are to be assigned.  If privileges, 
#separated by a colon, appear next to the user in the script that 
#this while-loop reads in, it means that those privileges are to
#be shutoff for that command when it is assigned to the user.
#
#
#while read cmd users
#do
#    base=`basename $cmd`
#    privs=`
#    egrep ":${cmd}$" /etc/security/tcb/privs|# Find command in tcb database
#    sed 's/^.*%inher,\(.*\):.*/\1/p' |       # get the set of inher privs
#    sed 's/,/:/gp'                           # changed ,'s to :'s
#    `
#    if [ -z "$privs" ]
#    then
#        if [ -f $cmd ]
#        then
#            prvd="no"
#        else
#            echo "Warning: $cmd not found on the system.\c"
#            echo "  Not adding to TFM."
#            continue
#        fi
#    else
#        prvd="yes"
#    fi
#    set $users
#    save="$privs"
#    while [ $# -gt 0 ]
#    do
#        user=$1
#        if echo "$1" | grep ":" > /dev/null
#        then
#            user=`
#            echo "$1" | sed 's/:.*$//p'`
#            if [ "$prvd" = "yes" ]
#            then
#                shutoff=`
#                echo "$1" | sed 's/[a-z]*:\(.*\)$/\1/p'`
#                shutoff=`echo "$shutoff"|sed 's/:/ /gp'`
#                echo "after sed - $shutoff"
#                fullset=`echo "$save"|sed 's/:/ /gp'`
#                for i in $shutoff    #check if privileges to be shut off
#                do                   #are in full set of privilges
#                    found="false"
#                    for j in $fullset
#                    do
#                        if [ "$i" = "$j" ]
#                        then
#                            found="true"
#                            break
#                        fi
#                    done
#                    privs=""
#                    if [ "$found" = "false" ]
#                    then
#                        echo "Warning: \c"
#                        echo "$i privilege specified to be shut off for $cmd,"
#                        echo "         but it is NOT in its set of privileges."
#                        break
#                    fi
#                done
#                if [ -z "$shutoff" ]
#                then
#                    privs="$save"
#                else
#                    for i in $fullset
#                    do
#                        found="false"
#                        for j in $shutoff
#                        do
#                            if [ "$i" = "$j" ]
#                            then
#                                found="true"
#                                break
#                            fi
#                        done
#                        if [ "$found" = "false" ]
#                        then
#                            if [ -z "$privs" ]
#                            then
#                                privs=$i
#                            else
#                                privs=$privs:$i
#                            fi
#                        fi
#                    done
#                fi
#            fi
#        else
#            privs="$save"
#        fi
#        if [ -z "$privs" ]
#        then
#            adminuser -a $base:$cmd $user
#        else
#            adminuser -a $base:$cmd:$privs $user
#        fi
#        shift
#    done
#done <<!
#/usr/bin/ps	root
#!

#
#The following defines the roles for the TFM database.
#
#
#for role in AUD OP SOP SSO
#do
#        test -d /etc/security/tfm/roles/$role && adminrole -d $role
#        adminrole -n $role
#done
#
#
#The following while-loop reads the commands and the roles
#to which these commands are to be assigned.  If privileges, 
#separated by a colon, appear next to the role in the script that 
#this while-loop reads in, it means that those privileges are to
#be shutoff for that command when it is assigned to the role.
#
#while read cmd roles
#do
#    echo $cmd | egrep "^#" > /dev/null 2>&1 && continue	# Skip comments
#    base=`basename $cmd`
#    privs=`
#    egrep ":${cmd}$" /etc/security/tcb/privs|	# Find command in tcb database
#    sed 's/^.*%inher,\(.*\):.*/\1/p' |          # get the set of inher privs
#    sed 's/,/:/gp'                              # changed ,'s to :'s
#    `
#    if [ -z "$privs" ]
#    then
#        if [ -f $cmd ]
#		then
#        	prvd="no"
#        else
#            echo "Warning: $cmd not found on the system.\c"
#            echo "  Not adding to TFM."
#            continue
#        fi
#    else
#        prvd="yes"
#    fi
#    set $roles
#    save="$privs"
#    while [ $# -gt 0 ]
#    do
#        role=$1
#        if echo "$1" | grep ":" > /dev/null
#        then
#            role=`
#            echo "$1" | sed 's/:.*$//p'`
#            if [ "$prvd" = "yes" ]
#            then
#                shutoff=`
#                echo "$1" | sed 's/^[A-Z]*://p'`
#				shutoff=`echo "$shutoff"|sed 's/:/ /gp'`
#				fullset=`echo "$save"|sed 's/:/ /gp'`
#				for i in $shutoff	#check if privileges to be shut off
#				do					#are in full set of privilges
#					found="false"
#					for j in $fullset
#					do
#						if [ "$i" = "$j" ]
#						then
#							found="true"
#							break
#						fi
#					done
#					privs=""
#					if [ "$found" = "false" ]
#					then
#						echo "Warning: \c"
#						echo "$i privilege specified to be shut off for $cmd,"
#						echo "         but it is NOT in its set of privileges."
#						break
#					fi
#				done
#				if [ -z "$shutoff" ]
#				then
#					privs="$save"
#                else
#	                for i in $fullset
#	                do
#	                    found="false"
#		                for j in $shutoff
#		                do
#			                if [ "$i" = "$j" ]
#			                then
#				                found="true"
#				                break
#			                fi
#		                done
#		                if [ "$found" = "false" ]
#		                then
#		                    if [ -z "$privs" ]
#		                    then
#		    	                privs=$i
#		                    else
#		                        privs=$privs:$i
#                            fi
#		                fi
#	                done
#				fi
#			fi
#        else
#            privs="$save"
#        fi
#        if [ -z "$privs" ]
#        then
#            adminrole -a $base:$cmd $role
#        else
#            adminrole -a $base:$cmd:$privs $role
#        fi
#        shift
#    done
#done <<!
#/sbin/df	OP	SOP	SSO
#/sbin/fsck	OP	SOP	SSO
#/sbin/init	SOP	SSO
#/sbin/mknod	SOP	SSO
#/sbin/mount	SOP	SSO
#/sbin/putdev	SSO
#/sbin/umount	SOP	SSO
#/usr/bin/cat	SSO
#/usr/bin/chgrp	SSO
#/usr/bin/chmod	SSO
#/usr/bin/chown	SSO
#/usr/bin/cp	SSO
#/usr/bin/cpio	SOP:dacwrite:macwrite	SSO
#/usr/bin/date	SSO
#/usr/bin/defadm	SSO
#/usr/bin/devattr	SOP	SSO
#/usr/bin/du	SOP	SSO
#/usr/bin/find	SOP	SSO
#/usr/bin/kill	SOP	SSO
#/usr/bin/ln	SSO
#/usr/bin/ls	SOP	SSO
#/usr/bin/mkdir	OP	SOP	SSO
#/usr/bin/mv	SSO
#/usr/bin/passwd	SSO
#/usr/bin/priocntl	SSO
#/usr/bin/ps	SOP	SSO
#/usr/bin/rm	SSO
#/usr/lib/saf/sac	SSO
#/usr/lib/saf/ttymon	SSO
#/usr/sbin/cron	SSO
#/usr/sbin/dispadmin	SSO
#/usr/sbin/groupadd	SSO
#/usr/sbin/groupdel	SSO
#/usr/sbin/groupmod	SSO
#/usr/sbin/pmadm	SOP	SSO
#/usr/sbin/sacadm	SOP	SSO
#/usr/sbin/shutdown	SOP	SSO
#/usr/sbin/useradd	SSO
#/usr/sbin/userdel	SSO
#/usr/sbin/usermod	SSO
#/usr/sbin/wall	OP	SOP	SSO
#!

rm -f /etc/emulator.dflt

###############################################
## this portion is taken from BNU's postinstall
################################################

#
#	Postinstall for "Basic Networking Utilities"
#
#	Carefully install new local uucp information files if none exist or
#	old style files exist.

INSPATH=/install/new
PKGNAME=$NAME

TEMPROOT=/usr/tmp/root.$$
TEMPUUCP=/usr/tmp/uucp.$$

#### Make sure the spools have been converted to the new format

/usr/lib/uucp/bnuconvert

#### Setup initialization cleanup script for rc2

installf $PKGINST /var/spool/cron/crontabs/uucp v 0600 uucp uucp 1 NULL NULL || error=yes

#### These are the default crontab entries

CLEANUP='45 23 * * * $TFADMIN /usr/lib/uucp/uudemon.clean  > /dev/null 2>&1'
HOUR='41,11 * * * * $TFADMIN /usr/lib/uucp/uudemon.hour > /dev/null'
POLL='1,30 * * * * $TFADMIN /usr/lib/uucp/uudemon.poll > /dev/null'

### The $TFADMIN will allow them to gain privilege on an ES system

#### Install crontab entries if crontab exists and entries do not exist

crontab -l root >$TEMPROOT 2>/dev/null
crontab -l uucp >$TEMPUUCP 2>/dev/null

if grep "uudemon.admin" $TEMPUUCP >/dev/null 2>&1
then  :
else
    if grep "uudemon.admin" $TEMPROOT >>$TEMPUUCP 2>&1
    then :
    else :
    fi
fi


if grep "uudemon.clean" $TEMPUUCP >/dev/null 2>&1
then  :
else
    if grep "uudemon.clean" $TEMPROOT >>$TEMPUUCP 2>&1
    then :
    else
	echo "$CLEANUP" >> $TEMPUUCP 2>/dev/null
    fi
fi

if grep "uudemon.hour" $TEMPUUCP >/dev/null 2>&1
then  :
else
    if grep "uudemon.hour" $TEMPROOT >>$TEMPUUCP 2>&1
    then :
    else
	echo "$HOUR" >> $TEMPUUCP 2>/dev/null
    fi
fi

if grep "uudemon.poll" $TEMPUUCP >/dev/null 2>&1
then  :
else
    if grep "uudemon.poll" $TEMPROOT >>$TEMPUUCP 2>&1
    then :
    else
	echo "$POLL" >> $TEMPUUCP 2>/dev/null
    fi
fi

# remove uudemon entries from root's crontab

crontab -l root 2>/dev/null | grep -v uudemon > $TEMPROOT 2>/dev/null

# replace uucp's crontab, and (if successful) root's

if [ -r /var/spool/cron/crontabs/uucp ]
then
	/usr/bin/chown uucp /var/spool/cron/crontabs/uucp >/dev/null 2>&1
fi

if /sbin/su uucp -c "crontab $TEMPUUCP" >/dev/null 2>&1
then
	/sbin/su root -c "crontab $TEMPROOT" >/dev/null 2>&1
else
    	echo "**WARNING**   ${PKGNAME} cannot install crontab entries."
	echo "Demons will not be running when installation is finished."
	echo "They will have to be added later."
fi
# change level of uucp if chlvl is installed
# also remove root file if it is empty
if [ -x /sbin/chlvl ]
then
	/sbin/chlvl SYS_PRIVATE /var/spool/cron/crontabs/uucp
	if [ ! -s /var/spool/cron/crontabs/root ]
	then
		/usr/bin/rm -f /var/spool/cron/crontabs/root
	fi
fi

rm -f $TEMPUUCP $TEMPROOT >/dev/null 2>&1

### allow uucp to get privilege for cron shell scripts

############### Begin UPGRADE AND OVERLAY #################
#
# For an OVERLAY case, we need to check if the user has already been
# adminuser'ed.  I could special case this for JUST the case where
# PKGINSTALL_TYPE=OVERLAY, but that seems like a waste of effort.
#
# We can't just skip this for an OVERLAY, becasue the theory behind
# doing an OVERLAY install if to recover a corrupted system.  If the
# TFM database is corrupted, then we need to add uucp again !
#

adminuser uucp >/dev/null 2>&1

[ $? != 0 ] && /usr/bin/adminuser -n uucp

/usr/bin/adminuser -a uudemon.poll:/usr/lib/uucp/uudemon.poll:macread:setplevel:sysops uucp >/dev/null 2>&1
/usr/bin/adminuser -a uudemon.hour:/usr/lib/uucp/uudemon.hour:macread:setplevel:sysops uucp >/dev/null 2>&1
/usr/bin/adminuser -a uudemon.clean:/usr/lib/uucp/uudemon.clean:macread:setplevel:sysops uucp >/dev/null 2>&1

#########################################################################
#									#
#	If nlsadmin is installed and if starlan is installed,		#
#	set up entries for ttysrv.  need this on two codes:		#
#		1	used by 3b2's for cu and uucico			#
#			and by 7300's for cu				#
#		102	used by 7300's for uucico			#
#									#
#	cannot set up for other networks at this time because don't	#
#	know whether they'll provide login service nor, if they do,	#
#	what the login-server will be named				#
#									#
#	we do not remove these entries at uninstall, because 1) we	#
#	have no way of knowing whether we created 'em or whether they	#
#	were already there and 2) they don't hurt anything, anyway.	#
#									#
#########################################################################
NLS=/usr/bin/nlsadmin
ERRMSG="Failed to create listener database entries to allow $PKGNAME\nto use the STARLAN Network:\n\t$NLS exited with code"

if [ -x $NLS ]
then    #    listener is installed

    if $NLS starlan >/dev/null 2>&1
    then    #    starlan is installed

        for code in 1 102
        do
            if [ "$code" -ge 1 -a "$code" -le 100 ]
            then
                cmd="$NLS -m"	# administrative codes from 1 to 100
            else
                cmd="$NLS"	# non-administrative codes otherwise
            fi
	    # see if service code exists, if it doesn't, create it
	    $NLS -q -z $code starlan >/dev/null 2>&1
	    rc=$?
	    if [ $rc -gt 1 ]
	    then
                $cmd -a $code -c"/usr/slan/lib/ttysrv" \
                    -y"login service" starlan >/dev/null 2>&1
		rc=$?
		if [ "$rc" -ne "0" ]
		then
		    echo $ERRMSG $rc
                    echo "\tConsult the documentation for more information."
                    break
		fi
            fi
        done
    fi
fi

#
# add entries for MLDs to the /etc/security/MLD/bnu file
#
echo "/var/uucp" >>/etc/security/MLD/bnu
echo "/var/spool/uucp" >>/etc/security/MLD/bnu
echo "/var/spool/uucppublic" >>/etc/security/MLD/bnu
echo "/var/spool/locks" >>/etc/security/MLD/bnu

installf ${PKGINST} /etc/security/MLD/bnu f 0644 root sys 2 NULL NULL

##############################################
# make sure serial mouse module configured, other
# mice types are not configured.
##############################################

turnon smse mse
turnoff bmse m320

##############################################
# portion of this is taken from lp postinstall
##############################################

LPSCHED=/usr/lib/lp/lpsched
VARSPOOLLP=/var/spool/lp

nodename=`uname -n`
VARSPOOLLP_TMP=${VARSPOOLLP}/tmp/${nodename}
VARSPOOLLP_REQUESTS=${VARSPOOLLP}/requests/${nodename}

cd /
${LPSCHED} >/dev/null 2>&1

echo "copy_files: nocopy" > /etc/default/lp
/usr/bin/chmod 644 /etc/default/lp
/usr/bin/chown lp /etc/default/lp
/usr/bin/chgrp lp /etc/default/lp 
installf ${PKGINST} /etc/default/lp v 0644 lp lp

### end of LP portion of postinstall


##
## new shutdown file with grace period 0 seconds as default
## it is volatile because pkg.license changes it to grace=60
##
echo grace=0 > /etc/default/shutdown
/usr/bin/chmod 444 /etc/default/shutdown 
/usr/bin/chown bin /etc/default/shutdown
/usr/bin/chgrp bin /etc/default/shutdown 
installf ${PKGINST} /etc/default/shutdown v 0444 bin bin 1 NULL NULL



# modify tuneable parameter values based on memory size

ONEMB=1048576
MEM=`memsize`
if [ `expr $MEM % $ONEMB` -ne 0 ];then
	MEM=`expr $MEM / $ONEMB + 1`
else
	MEM=`expr $MEM / $ONEMB`
fi

if [ $MEM -ge 8 ];then
	# create temporary /etc/conf/cf.d/mtune; it's blown away
	# below after we're done playing w/the tuneables....
	cat /etc/conf/mtune.d/* > /etc/conf/cf.d/mtune

	# machine has between 8 and 16 meg of memory
	if [ $MEM -lt 16 ];then
		/etc/conf/bin/idtune BUFHWM 400 > /dev/null 2>&1
		/etc/conf/bin/idtune NINODE 500 > /dev/null 2>&1
		/etc/conf/bin/idtune SFSNINODE 500 > /dev/null 2>&1
		/etc/conf/bin/idtune VXFSNINODE 500 > /dev/null 2>&1
		/etc/conf/bin/idtune DNLCSIZE 300 > /dev/null 2>&1
		/etc/conf/bin/idtune SPTMAP 300 > /dev/null 2>&1
		/etc/conf/bin/idtune SYSSEGSZ 3072 > /dev/null 2>&1
	fi
	# machine has greater than or equal to 16 meg of memory
	if [ $MEM -ge 16 ];then
		/etc/conf/bin/idtune BUFHWM 1024 > /dev/null 2>&1
		/etc/conf/bin/idtune NINODE 600 > /dev/null 2>&1
		/etc/conf/bin/idtune SFSNINODE 600 > /dev/null 2>&1
		/etc/conf/bin/idtune VXFSNINODE 600 > /dev/null 2>&1
		/etc/conf/bin/idtune DNLCSIZE 300 > /dev/null 2>&1
		/etc/conf/bin/idtune SPTMAP 600 > /dev/null 2>&1
		/etc/conf/bin/idtune SYSSEGSZ 4096 > /dev/null 2>&1
	fi
	# now remove temporary /etc/conf/cf.d/mtune
	rm -f /etc/conf/cf.d/mtune 2>/dev/null 1>/dev/null
fi

# Now, make sure root fs is not loadable and others are

SDEVICE=/etc/conf/sdevice.d
read ROOTFS < /etc/.fstype
case $ROOTFS in
ufs) grep -v loadable $SDEVICE/ufs > /tmp/ufs;
     grep -v loadable $SDEVICE/sfs > /tmp/sfs;
     mv /tmp/ufs $SDEVICE/ufs;
     mv /tmp/sfs $SDEVICE/sfs;
     chmod 644  $SDEVICE/ufs $SDEVICE/sfs;
     chgrp sys  $SDEVICE/ufs $SDEVICE/sfs;
     chown root $SDEVICE/ufs $SDEVICE/sfs;;
*) grep -v loadable $SDEVICE/$ROOTFS > /tmp/$ROOTFS;
   mv /tmp/$ROOTFS $SDEVICE/$ROOTFS;
   chmod 644  $SDEVICE/$ROOTFS;
   chgrp sys  $SDEVICE/$ROOTFS;
   chown root $SDEVICE/$ROOTFS;;
esac

# need this to configure multiple protocols for multiple boards. 

> /etc/confnet.d/netdrivers
installf ${PKGINST} /etc/confnet.d/netdrivers v 0644  root sys 

############### Begin UPGRADE AND OVERLAY #################

# Potential problem: 3 premature exits before we get here !!

ETCINST=/etc/inst
UPINSTALL=$ETCINST/up
SBINPKGINST=/usr/sbin/pkginst
UPGRADE_STORE=/var/sadm/upgrade
UP_MSGS=$ETCINST/locale/C/menus/upgrade

UPDEBUG_SCRIPT=$SBINPKGINST/updebug

#
# For all other scripts, I can edit updebug to turn debugging
# on when I need it.  The postinstall script is a special case,
# since it will be executed right after installing a verison of
# /usr/sbin/pkginst/updebug with debugging off, but before I can
# make the edit. So, I'm giving myself a little back door to
# still allow debugging this script.
#

[ -f $UPINSTALL/updebug.sh ] && UPDEBUG_SCRIPT=$UPINSTALL/updebug.sh

. $UPDEBUG_SCRIPT

[ "$PKGINSTALL_TYPE" != "NEWINSTALL" ] && {

	# Restore Version 4 ip Master file if it was saved.

	[ -f /etc/conf/mdevice.d/ip.v4 ] &&
		mv -f /etc/conf/mdevice.d/ip.v4 /etc/conf/mdevice.d/ip

	# Do special stuff for "merge"

	[ -f /etc/conf/mdevice.d/merge.save ] && {

		mv -f /etc/conf/mdevice.d/merge.save /etc/conf/mdevice.d/merge
		turnon dosx
	}

	[ "$UPDEBUG" = "YES" ] && set -x

	#
	#  Make sure we replace the stashed backup and restore commands.
	#    1) 4.2 bkrs version replaced, else
	#    2) V4 OA&M version replaced, else
	#    3) base package version already replaced above.
	#
	[ "${UPDEBUG}" = "YES" ] && set -x && goany
	if [ -f /usr/bin/.backup.4.2 ]
	then
		ln /usr/bin/.backup.4.2 /usr/bin/backup 2> /dev/null
		installf ${PKGINST} /usr/bin/.backup.4.2 
		ln /usr/bin/.restore.4.2 /usr/bin/restore 2> /dev/null
		installf ${PKGINST} /usr/bin/.restore.4.2
	else
		[ -f /usr/bin/.backup.V4 -o -f /usr/sbin/.restore.V4 -o -f /sbin/.restore.V4 ] && {
			ln /usr/bin/.backup.V4 /usr/bin/backup 2> /dev/null
			installf ${PKGINST} /usr/bin/.backup.V4
			ln /usr/sbin/.restore.V4 /usr/sbin/restore 2> /dev/null
			installf ${PKGINST} /usr/sbin/.restore.V4
			ln /sbin/.restore.V4 /sbin/restore 2> /dev/null
			installf ${PKGINST} /sbin/.restore.V4
		}
	fi

	[ "${UPDEBUG}" = "YES" ] && goany

	#
	#  We also need to replace any of the config files for the SAC
	#  that we stashed away in the request script.
	#
	DBFCONV=/usr/lib/saf/dbfconv

	[ "${PKGINSTALL_TYPE}" = "OVERLAY" ] && {
		SAVE=${UPGRADE_STORE}/SVR4.2
	}

	[ "${PKGINSTALL_TYPE}" = "UPGRADE" ] && {
		SAVE=${UPGRADE_STORE}
	}
	CURDIR=`pwd`
	cd ${SAVE}/etc/saf
	find . -print | cpio -pdum /etc/saf 2>>${UPERR}

	#
	#  Now, tcp's _pmtab needs to be dbfconv'ed
	#
	TAB='	'
	SPACE=' '

	[ -f ${SAVE}/etc/saf/tcp/_pmtab ] && {
		sed -e "/^[${TAB}${SPACE}]*$/d" ${SAVE}/etc/saf/tcp/_pmtab \
			> /tmp/_pmtab.tmp

		${DBFCONV} /tmp/_pmtab.tmp /etc/saf/tcp/_pmtab
	}

	#
	#  Lastly, 'kick' the sac for every service in the _sactab
	#  so that the new file is read and acted on.
	#
	SACLIST=`cut -d ':' -f 1 < /etc/saf/_sactab | \
		grep -v "[${SPACE}${TAB}]*#"`

	for SVC in ${SACLIST}
	do
		sacadm -x -p ${SVC} 2>>${UPERR}
	done
			

	[ "$AUTOMERGE" != "NULL" ] && {

		[ "$PKGINSTALL_TYPE" = "UPGRADE" ] && {

			#
			# We need to do this here, because we don't go
			# through the generic scripts that would have
			# created a base.sav file when the installation
			# is an upgrade of Version 4.
			#

			cp $UPINSTALL/patch/base.LIST $UPGRADE_STORE/base.sav

			#
			# Another UPGRADE specific thing we have to do is
			# remove the "nobody" login from the saved Version 4
			# passwd file before we merge volatile files.  We
			# need to do this because in v4, "nobody" was added
			# by the inet package, and in SVR4.2, it's in the
			# base passwd file.  Since in v4 it could be added
			# after many other logins had been added, our generic
			# merge tool could NOT guarantee to correctly delete
			# the this login.  Since passwd is such a critical
			# file, we thought it best to special case it here
			# to guarantee it ends up in a sane condition.
			#

			cp $UPGRADE_STORE/etc/passwd /tmp/passwd.$$
			grep -v "^nobody:" /tmp/passwd.$$ \
					> $UPGRADE_STORE/etc/passwd
		}

		#
		# We need to add boot.LIST to our file because those
		# files are not reflected in our base.sav file and
		# they do require merging.
		#

		cat $ETCINST/scripts/boot.LIST >>$UPGRADE_STORE/base.sav

		ed $UPGRADE_STORE/base.sav <<- EOF >>$UPERR 2>&1
			?var/sadm/install/contents
			d
			w
			q
			EOF

		#
		# For p12, something has changed that screws up the pkgadd
		# of the remainder of the fnd set packages if we restore
		# /etc/device.tab.  A special case kludge until we figure
		# out what else to do, we won't restore it.
		#

		grep -v "etc/device.tab" $UPGRADE_STORE/base.sav >/tmp/bsav.$$
		cp /tmp/bsav.$$ $UPGRADE_STORE/base.sav
		rm /tmp/bsav.$$

		[ "$UPDEBUG" = "YES" ] && goany && set +x

		$SBINPKGINST/pkgmrgconf "base" "$AUTOMERGE" "Base System"

		[ "$UPDEBUG" = "YES" ] && set -x

		[ "$PKGINSTALL_TYPE" = "UPGRADE" ] && {

			#
			# Now I need to clean up /etc/shadow.  Due to the
			# changing nature of the encrypted passwd field,
			# our generic merge tool cannot purge obsolete
			# entries.
			#

			OIFS=$IFS
			IFS=" "

			rm -f /tmp/shadow.$$

			while read LINE
			do
				#
				# I need set IFS=: to get the set to work
				# correctly and then I have to reset IFS
				# so the echo will put the correct line
				# in the shadow file.  If I don't reset
				# IFS everytime, the the echo LINE will
				# lack all the :'s.
				#

				IFS=:
				set $LINE
				IFS=" "
				
				grep "^${1}:" /etc/passwd >/dev/null 2>&1

				[ $? = 0 ] && echo $LINE >>/tmp/shadow.$$

				[ "$UPDEBUG" = "YES" ] && goany

			done </etc/shadow

			# I'm doing a cp to preserve owner and group

			chmod 666 /etc/shadow
			cp /tmp/shadow.$$ /etc/shadow
			chmod 400 /etc/shadow
			rm /tmp/shadow.$$

			/usr/sbin/pwconv

			IFS=$OIFS

			#
			# If it's NOT an UPGRADE, the upgrade specific files
			# were never installed, so we only need to cleanup
			# if we get to this section.
			#

			$SBINPKGINST/up_cleanup base
		}
	}

	[ "$UPDEBUG" = "YES" ] && goany

#
#	I'm going to comment this out for p11, because I need to use the
#	new pdi tools pdiadd and pdirm, BUT they aren't available yet and
#	I don't want to try anything that's untested.  If they installed
#	from tape, then I don't need this any how and if the install from
#	floppy, then they probably don't have a tape anyhow.  Even if they
#	do, it's probably already configured correctly.  After p11's out,
#	I'll test it with the neww pdi tools and delta for p12
#
#	When I do use pdiadd, I'll need info from qt.mdev (dma channel)
#
#	TAPE=ict
#
#	[ "$PKGINSTALL_TYPE" = "UPGRADE" ] && TAPE=qt
#
#	# Sync-up qt/ict IRQ and I/O addrs
#
#	[ -f $UPINSTALL/$TAPE.sdev ] && {
#
#		set `grep "^$TAPE" $UPINSTALL/$TAPE.sdev`
#		YORN=$2
#		IRQ=$6
#		LADDR=$7
#		HADDR=$8
#		set `grep "^ict" /etc/conf/sdevice.d/ict`
#		shift 2
#
#		ed /etc/conf/sdevice.d/ict <<- EOF >>$UPERR 2>&1
#			/^ict
#			d
#			a
#			ict	$YORN	$1	$2	$3	$IRQ	$LADDR	$HADDR	$7	$8	$9
#			.
#			w
#			q
#			EOF
#
#		rm -f $UPINSTALL/$TAPE.sdev
#	}

	#
	# By removing /etc/scsi/pdi_edt, we're forcing pdimkdev to create
	# new /dev nodes next time it's run.  There are two cases:
	#
	# 1) We're "overlaying" via the boot floppy installation process.
	#
	#    In this case, pdimkdev will run after the foundation set has
	#    been installed, in the script that rebuilds the the kernel.
	#    We need to do this, because we currently blow the original
	#    /dev directory away and recreate it from scratch.  Then when
	#    pdimkdev runs, it notices that the scsi configuration has not
	#    changed by checking pdi_edt, and decides it would be a waste
	#    of effort to recreate the nodes since the system configuration
	#    has not changed since the last reboot.  This leads to
	#    incorrect and missing /dev nodes.
	#
	#    An alternative that requires some more thought, would be to
	#    leave the existing /dev in place for an overlay.  One problem
	#    with this may be trouble trying to overlay from tape off the
	#    boot floppies, since the boot floppies know what tape nodes
	#    have just been created.
	#
	# 2) We're "overlaying" via pkgadd from the shell.
	#
	#    In this case, pdimkdev will run the next time the system is
	#    rebooted.  Overlaying the base package without going through
	#    the boot floppies will create new nodes, overwrite others and
	#    leave other exisiting nodes alone.  By forcing pdimkdev to run
	#    in this case will allow the removal of nodes that are not
	#    required.
	# 

	[ "$PKGINSTALL_TYPE" = "OVERLAY" ] && rm -f /etc/scsi/pdi_edt

	[ "$UPDEBUG" = "YES" ] && goany && set +x
}

################ End UPGRADE AND OVERLAY ##################

if [ -d /stand ]
then
	chmod 755 /stand
fi

if [ ! -f /stand/unix ]
then
	touch /stand/unix
fi

echo "Editing Package" > /usr/options/ed.name
installf $PKGINST /usr/options/ed.name

echo "Form and Menu Language Interpreter" > /usr/options/fmli.name
installf $PKGINST /usr/options/fmli.name

echo "Mouse Driver Package" > /usr/options/mouse.name
installf $PKGINST /usr/options/mouse.name

echo "Cartridge Tape Utilities" > /usr/options/qt.name
installf $PKGINST /usr/options/qt.name

echo "Termcap Compatibility Package" > /usr/options/termcap.name
installf $PKGINST /usr/options/termcap.name

installf -f ${PKGINST} 

#
# Remove files in contents database.
#
# /dev/console - pkgchk will always complain because the owner changes
#		 depending on who logs in.
# /etc/rc2.d/S15mkdtab - it removes itself after first execution.

removef ${PKGINST} /dev/console
removef ${PKGINST} /etc/rc2.d/S15mkdtab

removef -f ${PKGINST}

#
# basic backup links, done here so that extended backup
# pkg can adjust.
# Only do this if we're not replacing backup and restore
# commands from 4.2 bkrs or V4 OA&M...
#
[ ! -f /usr/bin/.backup.4.2 -a ! -f /usr/bin/.backup.V4 ] && {
	ln /usr/bin/.backup /usr/bin/backup
	ln /usr/bin/.restore /usr/bin/restore
	ln /usr/sbin/.backup /usr/sbin/backup
	ln /usr/sbin/.restore /usr/sbin/restore
	cp /usr/bin/restore /sbin/restore
}

[ "$PKGINSTALL_TYPE" = "UPGRADE" ] && {

	#
	# Let's talk "kludge" -- I don't like them either,
	# but what can I say, I even used a "goto" once.
	#
	# An upgrade produces a pile of WARNING messages
	# that are really NO problem.  We could just let
	# them stay in the log file, but if a real problem
	# occurs and the user is directed to the log, all
	# these WARNINGS could overwhelm a naive user and
	# they may not see what the REAL problem is.
	#

	LOGS=/var/sadm/install/logs

	[ -f $LOGS/$PKGINST.log ] && {

		cat $LOGS/$PKGINST.log |
		grep -v "^WARNING: /usr/share/lib/terminfo/" > $LOGS/$PKGINST.nlog

		mv -f $LOGS/$PKGINST.nlog $LOGS/$PKGINST.log
	}
}

exit 0


